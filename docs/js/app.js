/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/node-fetch/browser.js":
/*!********************************************!*\
  !*** ./node_modules/node-fetch/browser.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = exports = window.fetch;\r\n\r\n// Needed for TypeScript and Webpack.\r\nexports.default = window.fetch.bind(window);\r\n\r\nexports.Headers = window.Headers;\r\nexports.Request = window.Request;\r\nexports.Response = window.Response;\r\n\n\n//# sourceURL=webpack:///./node_modules/node-fetch/browser.js?");

/***/ }),

/***/ "./src/js/Graph-abundance-plot.js":
/*!****************************************!*\
  !*** ./src/js/Graph-abundance-plot.js ***!
  \****************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return GraphAbundancePlot; });\n/* harmony import */ var _GraphClass__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./GraphClass */ \"./src/js/GraphClass.js\");\n/* harmony import */ var _Graph_event_trans_excramate__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Graph-event-trans-excramate */ \"./src/js/Graph-event-trans-excramate.js\");\n/* harmony import */ var _lib_funcTools__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./lib/funcTools */ \"./src/js/lib/funcTools.js\");\n\r\n\r\n\r\n\r\nconst {\r\n    transduce,\r\n    Dataframe\r\n} = _lib_funcTools__WEBPACK_IMPORTED_MODULE_2__[\"default\"];\r\nconst {\r\n    mapping,\r\n    filtering,\r\n    intoArray\r\n} = transduce;\r\n\r\n\r\n\r\nclass Abundance extends _GraphClass__WEBPACK_IMPORTED_MODULE_0__[\"Graph\"] {\r\n    constructor(graph, setting, tooltip) {\r\n        super(graph, setting, tooltip);\r\n        this.magnifyMyData = {\r\n            r: 1.5,\r\n            strokeWidth: 1.2\r\n        }\r\n    }\r\n\r\n\r\n    replot(state) {\r\n        this.state.refData = Abundance.getNormList(state, this.state);\r\n        const plotFunc = Abundance.showPlot(\r\n            this.state,\r\n            this.scale,\r\n            this.plotStyle,\r\n            state\r\n        );\r\n\r\n        const path = this.canvas.selectAll(\"g\").data(state.data);\r\n        path.exit().transition().remove()\r\n        const entered = path.enter().append(\"g\");\r\n        const merged = entered.merge(path);\r\n        merged.each(plotFunc)\r\n\r\n        merged.on(\"mouseover\", _Graph_event_trans_excramate__WEBPACK_IMPORTED_MODULE_1__[\"default\"].onMouseOver(\r\n            this.state,\r\n            this.plotStyle,\r\n            state\r\n        ))\r\n            .on(\"mouseover.tooltip\", Abundance.showTooltip(this.state, this.tooltip))\r\n            .on(\"mouseout\", _Graph_event_trans_excramate__WEBPACK_IMPORTED_MODULE_1__[\"default\"].onMouseOut(\r\n                this.state,\r\n                this.plotStyle,\r\n                state\r\n            ))\r\n            .on(\"mouseout.tooltip\", Abundance.hideTooltip(this.state, this.tooltip))\r\n            .on(\"click\", _Graph_event_trans_excramate__WEBPACK_IMPORTED_MODULE_1__[\"default\"].onClick(\r\n                this.state,\r\n                this.plotStyle,\r\n                state\r\n            ));\r\n\r\n\r\n        this.svg.on(\"click\", _Graph_event_trans_excramate__WEBPACK_IMPORTED_MODULE_1__[\"default\"].globalClick(merged, this.plotStyle))\r\n    }\r\n\r\n    static showTooltip(_, tooltip) {\r\n        return function (d) {\r\n            tooltip.style(\"visibility\", \"visible\")\r\n                .text(`${d.name}  ${d.location}`)\r\n        }\r\n    }\r\n\r\n    static hideTooltip(_, tooltip) {\r\n        return function (d) {\r\n            tooltip.style(\"visibility\", \"hidden\")\r\n        }\r\n    }\r\n\r\n\r\n    static showPlot(\r\n        { x, doNormalization, refData },\r\n        scale,\r\n        plotStyle,\r\n        { symbol, styleClass }\r\n    ) {\r\n        const { label } = x\r\n        const defined = d => !isNaN(d.y) && d.y !== 0 && isFinite(d.y);\r\n        const line = d3.line()\r\n            .x(d => scale.x(d.x))\r\n            .y(d => scale.y(d.y))\r\n            .defined(defined);\r\n\r\n\r\n        const getOneLine = d => label.map(e => ({\r\n            x: e,\r\n            y: d[e]\r\n        }))\r\n        const normalize = Abundance.getNormalizedData(doNormalization, refData)\r\n        return function (d) {\r\n            const data = getOneLine(normalize(d))\r\n            const filtered = data.filter(defined)\r\n            d3.select(this)\r\n                .attr(\"class\", d => _GraphClass__WEBPACK_IMPORTED_MODULE_0__[\"Graph\"].setClass(d, styleClass))\r\n                .selectAll(\"path\")\r\n                .remove()\r\n            d3.select(this).append(\"path\")\r\n                .attr(\"fill\", \"none\")\r\n                .attr(\"class\", d => _GraphClass__WEBPACK_IMPORTED_MODULE_0__[\"Graph\"].setClass(d, styleClass))\r\n                .attr(\"stroke-width\", plotStyle.strokeWidth)\r\n                .attr(\"opacity\", plotStyle.opacity)\r\n                .transition()\r\n                //.call(line)\r\n                .attr(\"d\", line(data))\r\n            if (data.length === filtered.length) return;\r\n            d3.select(this).append(\"path\")\r\n                .attr(\"fill\", \"none\")\r\n                .attr(\"class\", d => _GraphClass__WEBPACK_IMPORTED_MODULE_0__[\"Graph\"].setClass(d, styleClass))\r\n                .attr(\"stroke-width\", plotStyle.strokeWidth * 0.9)\r\n                .attr(\"opacity\", plotStyle.opacity)\r\n                .attr(\"stroke-dasharray\", \"1 8\")\r\n                .attr(\"stroke-linecap\", \"round\")\r\n                .transition()\r\n                //.call(line)\r\n                .attr(\"d\", line(filtered))\r\n\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n    static getNormList({ refData }, { normInfo }) {\r\n        return refData\r\n            .filter(e => e.name === normInfo[0] && e.study === normInfo[1])[0]\r\n    }\r\n\r\n    updateSvgSize() {\r\n        const width = parseInt(\r\n            document.querySelector(\"body\").clientWidth * this.state.imageSize);\r\n        const aspect = this.state.aspect;\r\n\r\n        this.graphGeometry.figureSize = {\r\n            width: parseInt(width),\r\n            height: parseInt(width * aspect)\r\n        }\r\n    }\r\n\r\n    readSetting() {\r\n        super.readSetting();\r\n        this.state.normInfo = this.state.reserver.split(\",\")\r\n    }\r\n\r\n    setStateX() {\r\n        this.state.x = {\r\n            label: this.state.eleName\r\n                .replace(/,/g, \" \")\r\n                .replace(/\\s+/g, \" \")\r\n                .replace(/\\s$/, \"\")\r\n                .split(\" \"),\r\n            name: \" \"\r\n        }\r\n    }\r\n\r\n    setStateY() {\r\n        this.state.y = {\r\n            name: \" \"\r\n        }\r\n    }\r\n\r\n    updateTitle() {\r\n        const { x, y, normInfo, doNormalization } = this.state;\r\n        this.setTitle((doNormalization)\r\n            ? `Normalized by ${normInfo[0]}`\r\n            : `Abundance`);\r\n    }\r\n\r\n    updateAxisType() {\r\n        const size = this.graphGeometry.figureSize\r\n        const axis = this.graphGeometry.axisSize\r\n        this.scale.x = d3.scalePoint();\r\n        this.scale.x.domain(this.extent.x)\r\n            .range([0, axis.width])\r\n            .padding(0.5);\r\n        this.axis.x = d3.axisBottom(this.scale.x)\r\n        this.axis.x.tickSize(6, -size.height);\r\n\r\n        this.scale.y = d3.scaleLog()\r\n        this.scale.y.domain(this.extent.y)\r\n            .range([axis.height, 0])\r\n            .nice();\r\n        this.axis.y = d3.axisLeft(this.scale.y)\r\n        this.axis.y.tickSize(6, -size.width);\r\n\r\n    }\r\n\r\n    static getNormalizedData(doNormalization, refData) {\r\n        return d => {\r\n            if (doNormalization) {\r\n                const obj = {}\r\n                Object.entries(d)\r\n                    .forEach(([k, v]) => {\r\n\r\n                        if (isNaN(refData[k]) && isNaN(v)) {\r\n                            obj[k] = v\r\n                        } else {\r\n                            const val = v / refData[k]\r\n                            if (isNaN(refData[k])) {\r\n                                obj[k] = NaN;\r\n                            } else {\r\n                                obj[k] = (isFinite(val))\r\n                                    ? val\r\n                                    : NaN;\r\n                            }\r\n                        }\r\n                    })\r\n                return obj\r\n            } else {\r\n                return d\r\n            }\r\n        }\r\n    }\r\n\r\n    updateExtent() {\r\n        const { x, y_min, y_max } = this.state;\r\n        this.extent.x = x.label;\r\n        this.extent.y = [y_min, y_max]\r\n    }\r\n}\r\n\r\nclass GraphAbundancePlot extends _GraphClass__WEBPACK_IMPORTED_MODULE_0__[\"GraphManager\"] {\r\n    constructor(uiState) {\r\n        super(uiState);\r\n        this.label = \"Abundance pattern\";\r\n        this.type = \"Abundance\";\r\n        this.Graph = Abundance;\r\n    }\r\n\r\n    style() {\r\n        return `\r\n  top: 50px;\r\n  left: 30%;\r\n  width: 50vw;\r\n  min-width: 300px;\r\n    `\r\n    }\r\n\r\n    template(uiState) {\r\n        return `\r\n<style>\r\n.abundance-setting{\r\n  display : flex;\r\n  flex-direction : column;\r\n}\r\n.abundance-setting > div{\r\n  display : flex;\r\n  align-items : center;\r\n  border-bottom : 1px dashed var(--form-color);\r\n  margin: 3px 0;\r\n  padding : 10px 0;\r\n}\r\n.abundance-setting .inp.wide{\r\n  max-width : 100%;\r\n}\r\n.abundance-setting .imageInput span{\r\n  flex : 1;\r\n}\r\n.abundance-setting .imageInput input{\r\n  flex : 2;\r\n}\r\n.abundance-setting .imageInput label{\r\n  min-width: 100px;\r\n}\r\n</style>\r\n\r\n\r\n<form class=\"abundance-setting\" name=\"formAbundance\" action=\"#\">\r\n  <a href=\"#\" class=\"close_button\"></a>\r\n  <hr style=\"visibility:hidden\">\r\n\r\n  <datalist id=\"eleList\">\r\n    <option value=\"La Ce Pr Nd Sm Eu Gd Tb Dy Ho Er Tm Yb Lu\"></option>\r\n    <option value=\"Rb Ba Th U Ta Nb K La Ce Pb Pr Sr Nd Zr Hf Sm Eu Gd Tb Dy Y Ho Er Tm Yb Lu\"></option>\r\n    <option value=\"Rb Ba Th Nb La Ce Pb Pr Sr Nd Zr Hf Sm Eu Gd Tb Dy Y Ho Er Tm Yb Lu\"></option>\r\n    <option value=\"Rb Ba Th U K Ta Nb La Ce Sr Nd P Hf Zr Sm Ti Tb Yb\"></option>\r\n    <option value=\"Sr K Rb Ba Th Ta Nb Ce P Zr Hf Sm Ti Y Yb\"></option>\r\n    <option value=\"Rb Ba Th K Nb La Ce Sr Nd Zr Sm Eu Gd Ti Dy Y Er Yb V Cr Ni\"></option>\r\n    <option value=\"Rb Ba Th Nb K Pb Sr Nd Zr Hf Y\"></option>\r\n  </datalist>\r\n\r\n  <div class=\"eleInput__Abundance\">\r\n    <label >\r\n      <input type=\"checkbox\" id=\"doNormalization\" tabindex=0 checked>\r\n      <span class=\"checkbox-parts\">Normalize</span>\r\n    </label>\r\n\r\n    <label for=\"eleName\" class=\"inp wide\">\r\n      <input  type=\"text\" id=\"eleName\" placeholder=\"&nbsp;\"  pattern=\"^[0-9A-Za-z\\\\s]+$\" autofocus required  list=\"eleList\" autocomplete=\"on\" value=\"La Ce Pr Nd Sm Eu Gd Tb Dy Ho Er Tm Yb Lu\">\r\n      <span class=\"label\">Element list</span>\r\n      <span class=\"border\"></span>\r\n    </label>\r\n  </div>\r\n\r\n  <div>\r\n  <span class=\"text\">Normalizing reserver</span>\r\n  <br>\r\n  <select id=\"reserver\">\r\n    <optgroup label=\"Primitive mantle\">\r\n      <option value=\"PM,Sun&McDonough-1989\">Sun & McDonough(1989)</option>\r\n      <option value=\"PM,Lyubetskaya&Korenaga-2007\">Lyubetskaya & Korenaga(2007)</option>\r\n    </optgroup>\r\n    <optgroup label=\"MORB source mantle\">\r\n      <option value=\"AverageDMM,Workman&Hart-2005\">Average DMM by Workman & Hart (2005)</option>\r\n      <option value=\"EDMM,Workman&Hart-2005\">EDMM by Workman & Hart(2005)</option>\r\n      <option value=\"DDMM,Workman&Hart-2005\">DMM by Workman & Hart(2005)</option>\r\n    </optgroup>\r\n    <optgroup label=\"MORB\">\r\n      <option value=\"NMORB,Sun&McDonough-1989\">MORB by Sun & McDonough(1989)</option>\r\n      <option value=\"EMORB,Sun&McDonough-1989\">EMORB by Sun & McDonough(1989)</option>\r\n    </optgroup>\r\n    <optgroup label=\"OIB\">\r\n      <option value=\"OIB,Sun&McDonough-1989\">OIB by Sun & McDonough(1989)</option>\r\n    </optgroup>\r\n    <optgroup label=\"Chondrite\">\r\n      <option value=\"CI_chondrite,Lodders-2003\">CI chondrite by Lodders(2003)</option>\r\n    </optgroup>\r\n    <optgroup label=\"Raw value\">\r\n      <option value=\"not_normalize,mine\">Not normalizing</option>\r\n    </optgroup>\r\n  </select>\r\n  </div>\r\n\r\n\r\n  <div class=\"rangeInput__Abundance\">\r\n    <span>Range</span>\r\n    <label for=\"y_min\" class=\"inp\">\r\n      <input type=\"number\" id=\"y_min\" value=\"0.001\" placeholder=\"&nbsp;\">\r\n      <span class=\"label\">y min</span>\r\n      <span class=\"border\"></span>\r\n    </label>\r\n\r\n    <span class=\"text\">:</span>\r\n\r\n    <label for=\"y_max\" class=\"inp\">\r\n      <input type=\"number\" id=\"y_max\" value=\"1000\" placeholder=\"&nbsp;\">\r\n      <span class=\"label\">y max</span>\r\n      <span class=\"border\"></span>\r\n    </label>\r\n  </div>\r\n\r\n\r\n  <div class=\"imageInput\">\r\n      <span class=\"text\">Image size</span>\r\n      <input class=\"mdl-slider mdl-js-slider\" type=\"range\" id=\"imageSize\" min=\"0.2\" max=\"1\" value=\"0.5\" step=\"0.05\">\r\n\r\n  </div>\r\n\r\n  <div>\r\n    <label for=\"aspect\" class=\"inp\">\r\n      <input type=\"number\" id=\"aspect\" min=\"0.1\" value=\"0.8\" step=\"0.05\" placeholder=\"&nbsp;\">\r\n      <span class=\"label\">aspect ratio</span>\r\n      <span class=\"border\"></span>\r\n    </label>\r\n  </div>\r\n\r\n</form>\r\n  `}\r\n}\r\n\n\n//# sourceURL=webpack:///./src/js/Graph-abundance-plot.js?");

/***/ }),

/***/ "./src/js/Graph-binary-plot.js":
/*!*************************************!*\
  !*** ./src/js/Graph-binary-plot.js ***!
  \*************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return GraphBinaryPlot; });\n/* harmony import */ var _GraphClass__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./GraphClass */ \"./src/js/GraphClass.js\");\n/* harmony import */ var _Graph_event_trans_excramate__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Graph-event-trans-excramate */ \"./src/js/Graph-event-trans-excramate.js\");\n/* harmony import */ var _lib_funcTools__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./lib/funcTools */ \"./src/js/lib/funcTools.js\");\n\r\n\r\n\r\n\r\nconst {\r\n    transduce,\r\n    Dataframe\r\n} = _lib_funcTools__WEBPACK_IMPORTED_MODULE_2__[\"default\"];\r\nconst {\r\n    mapping,\r\n    filtering,\r\n    intoArray\r\n} = transduce;\r\n\r\n\r\n\r\nconst getPrecision = (val, precise = 4) => {\r\n    let value = new Number(val);\r\n    return value.toPrecision(precise);\r\n}\r\n\r\nclass Binary extends _GraphClass__WEBPACK_IMPORTED_MODULE_0__[\"Graph\"] {\r\n    constructor(graph, setting, tooltip) {\r\n        super(graph, setting, tooltip);\r\n        this.magnifyMyData = {\r\n            r: 1.5,\r\n            strokeWidth: 1.2\r\n        }\r\n    }\r\n\r\n\r\n    replot(state) {\r\n\r\n        const canvas = this.canvas;\r\n        const plotFunc = Binary.showPoint(\r\n            this.state,\r\n            this.scale,\r\n            this.plotStyle,\r\n            state\r\n        );\r\n\r\n        const circle = canvas.selectAll(\"circle\").data(state.data);\r\n        circle.exit().transition().remove();\r\n        const enter = circle.enter().append(\"circle\")\r\n        const merged = enter.merge(circle)\r\n        merged.each(plotFunc);\r\n\r\n        merged.on(\"mouseover\", _Graph_event_trans_excramate__WEBPACK_IMPORTED_MODULE_1__[\"default\"].onMouseOver(\r\n            this.state,\r\n            this.plotStyle,\r\n            state\r\n        ))\r\n            .on(\"mouseover.tooltip\", Binary.showTooltip(this.state, this.tooltip))\r\n            .on(\"mouseout\", _Graph_event_trans_excramate__WEBPACK_IMPORTED_MODULE_1__[\"default\"].onMouseOut(\r\n                this.state,\r\n                this.plotStyle,\r\n                state\r\n            ))\r\n            .on(\"mouseout.tooltip\", Binary.hideTooltip(this.state, this.tooltip))\r\n            .on(\"click\", _Graph_event_trans_excramate__WEBPACK_IMPORTED_MODULE_1__[\"default\"].onClick(\r\n                this.state,\r\n                this.plotStyle,\r\n                state\r\n            ), false);\r\n\r\n        this.svg.on(\"click.onoff\", _Graph_event_trans_excramate__WEBPACK_IMPORTED_MODULE_1__[\"default\"].globalClick(merged, this.plotStyle), false)\r\n        _Graph_event_trans_excramate__WEBPACK_IMPORTED_MODULE_1__[\"default\"].updateExtentByBrush(this.brushArea, {\r\n            end: Binary.updateExtentByBrush(state).bind(this)\r\n        });\r\n    }\r\n\r\n    static updateExtentByBrush(state) {\r\n        return function (d3_event) {\r\n            const [start, end] = d3_event.selection;\r\n            this.extent.x = [\r\n                this.scale.x.invert(start[0]),\r\n                this.scale.x.invert(end[0])\r\n            ];\r\n            this.extent.y = [\r\n                this.scale.y.invert(end[1]),\r\n                this.scale.y.invert(start[1])\r\n            ];\r\n            this.updateAxis();\r\n            this.replot(state);\r\n        }\r\n    }\r\n\r\n    static showTooltip({ x, y }, tooltip) {\r\n        return function (d) {\r\n            tooltip.style(\"visibility\", \"visible\")\r\n                .text(`${d.name}  ${d.location} [ ${getPrecision(d[x.sup])}${(x.sub === \"dummy\") ? \"\" : \"/\" + getPrecision(d[x.sub]) + \"=\" + getPrecision(d[x.sup] / d[x.sub])} : ${getPrecision(d[y.sup])}${(y.sub === \"dummy\") ? \"\" : \"/\" + getPrecision(d[y.sub]) + \"=\" + getPrecision(d[y.sup] / d[y.sub])} ]`)\r\n        }\r\n    }\r\n\r\n    static hideTooltip(_, tooltip) {\r\n        return function (d) {\r\n            tooltip.style(\"visibility\", \"hidden\")\r\n        }\r\n    }\r\n\r\n    static showPoint(\r\n        { x, y },\r\n        scale,\r\n        plotStyle,\r\n        { styleClass }\r\n    ) {\r\n\r\n        return function (d) {\r\n            const cx = scale.x(+d[x.sup] / +d[x.sub])\r\n            const cy = scale.y(+d[y.sup] / +d[y.sub])\r\n\r\n            const self = d3.select(this)\r\n\r\n            if (isNaN(cx) || isNaN(cy) || !isFinite(cx) || !isFinite(cy)) {\r\n                self.transition()\r\n                    .attr(\"r\", 0)\r\n                    .remove();\r\n                return false;\r\n            }\r\n            self.attr('stroke-width', d => d.study === \"mine\" ? 1 : \"none\")\r\n                .attr(\"fill\", \"none\")\r\n                .attr(\"class\", d => _GraphClass__WEBPACK_IMPORTED_MODULE_0__[\"Graph\"].setClass(d, styleClass))\r\n                .attr(\"opacity\", plotStyle.opacity)\r\n                .transition()\r\n                .attr(\"r\", plotStyle.r)\r\n                .attr(\"cx\", cx)\r\n                .attr(\"cy\", cy)\r\n        }\r\n    }\r\n\r\n    static plotStyle(type, multiple, { symbol }) {\r\n        return function (d) {\r\n            const value = (d.onState === \"selected\")\r\n                ? symbol[\"selected\" + type]\r\n                : (d.onState === \"on\")\r\n                    ? symbol[\"on\" + type]\r\n                    : symbol[\"base\" + type];\r\n            return (d.study === \"mine\")\r\n                ? value * multiple\r\n                : value\r\n        }\r\n    }\r\n\r\n\r\n    updateSvgSize() {\r\n        const width = parseInt(\r\n            document.querySelector(\"body\").clientWidth * this.state.imageSize);\r\n        const aspect = this.state.aspect;\r\n\r\n        this.graphGeometry.figureSize = {\r\n            width: parseInt(width),\r\n            height: parseInt(width * aspect)\r\n        }\r\n    }\r\n\r\n    setStateX() {\r\n        this.state.x = Binary.parseDataName(\r\n            this.state.xName,\r\n            this.state.x_min,\r\n            this.state.x_max,\r\n            this.state.checkLogX\r\n        )\r\n    }\r\n\r\n    setStateY() {\r\n        this.state.y = Binary.parseDataName(\r\n            this.state.yName,\r\n            this.state.y_min,\r\n            this.state.y_max,\r\n            this.state.checkLogY\r\n        )\r\n    }\r\n\r\n\r\n    updateTitle() {\r\n        const { x, y } = this.state;\r\n        this.setTitle(`${x.name} vs. ${y.name}`);\r\n    }\r\n\r\n    updateAxisType() {\r\n        const size = this.graphGeometry.figureSize;\r\n        const axis = this.graphGeometry.axisSize;\r\n        this.scale.x = (this.state.x.islog)\r\n            ? d3.scaleLog()\r\n            : d3.scaleLinear();\r\n        this.scale.x.domain(this.extent.x)\r\n            .range([0, axis.width])\r\n            .nice();\r\n        this.axis.x = d3.axisBottom(this.scale.x).ticks(5)\r\n        this.axis.x.tickSize(6, -size.height);\r\n\r\n        this.scale.y = (this.state.y.islog)\r\n            ? d3.scaleLog()\r\n            : d3.scaleLinear();\r\n        this.scale.y.domain(this.extent.y)\r\n            .range([axis.height, 0])\r\n            .nice();\r\n        this.axis.y = d3.axisLeft(this.scale.y).ticks(5)\r\n        this.axis.y.tickSize(6, -size.width);\r\n\r\n    }\r\n\r\n    updateExtent({ data }) {\r\n        if (!Array.isArray(data)) return null;\r\n        const { x, y } = this.state;\r\n        this.extent.x = [\r\n            (isNaN(x.min))\r\n                ? d3.min(data.filter(d => isFinite(+d[x.sup] / +d[x.sub])), d => +d[x.sup] / +d[x.sub])\r\n                : x.min,\r\n            (isNaN(x.max))\r\n                ? d3.max(data.filter(d => isFinite(+d[x.sup] / +d[x.sub])), d => +d[x.sup] / +d[x.sub])\r\n                : x.max\r\n        ];\r\n\r\n        this.extent.y = [\r\n            (isNaN(y.min))\r\n                ? d3.min(data.filter(d => isFinite(+d[y.sup] / +d[y.sub])), d => +d[y.sup] / +d[y.sub])\r\n                : y.min,\r\n            (isNaN(y.max))\r\n                ? d3.max(data.filter(d => isFinite(+d[y.sup] / +d[y.sub])), d => +d[y.sup] / +d[y.sub])\r\n                : y.max\r\n        ];\r\n\r\n    }\r\n\r\n\r\n    static parseDataName(name, min, max, islog) {\r\n        const obj = {\r\n            name: name,\r\n            islog: islog,\r\n            max: max,\r\n            min: min,\r\n            char: new Array(name.match(/[A-Z]+/gi)),\r\n            num: new Array(name.match(/[0-9]+/g))\r\n        };\r\n        const type = (name.match(/^[0-9]+/))\r\n            ? {\r\n                type: \"isotope\",\r\n                element: name.match(/[a-z]+/i)[0],\r\n                sup: name,\r\n                sub: \"dummy\"\r\n            }\r\n            : (name.match(/\\//))\r\n                ? {\r\n                    type: \"ratio\",\r\n                    element: name.split(\"/\")[0],\r\n                    sup: name.split(\"/\")[0],\r\n                    sub: name.split(\"/\")[1]\r\n                }\r\n                : {\r\n                    type: \"abundance\",\r\n                    element: \"dummy\",\r\n                    sup: name,\r\n                    sub: \"dummy\"\r\n                }\r\n        return Object.assign(obj, type);\r\n    }\r\n\r\n}\r\n\r\nclass GraphBinaryPlot extends _GraphClass__WEBPACK_IMPORTED_MODULE_0__[\"GraphManager\"] {\r\n    constructor(uiState) {\r\n        super(uiState);\r\n        this.label = \"Binary variation\";\r\n        this.type = \"Binary\";\r\n        this.Graph = Binary;\r\n    }\r\n\r\n\r\n\r\n    style() {\r\n        return `\r\n  top: 50px;\r\n  left: 30%;\r\n  width: 40vw;\r\n  min-width: 300px;\r\n    `\r\n    }\r\n\r\n    template(uiState) {\r\n        return `\r\n<style>\r\n.binary-setting{\r\n  display : flex;\r\n  flex-direction : column;\r\n}\r\n.binary-setting > div{\r\n  display : flex;\r\n  align-items : center;\r\n  border-bottom : 1px dashed var(--form-color);\r\n  margin: 3px 0;\r\n  padding : 10px 0;\r\n}\r\n\r\n.binary-setting .eleInput label{\r\n  /*width: 10vw;*/\r\n  min-width: 70px;\r\n}\r\n.binary-setting .rangeInput label{\r\n  /*width: 6vw;*/\r\n  min-width: 50px;\r\n}\r\n.binary-setting .imageInput {\r\n\r\n}\r\n.binary-setting .imageInput span{\r\n  flex : 1;\r\n}\r\n.binary-setting .imageInput input{\r\n  flex : 2;\r\n}\r\n.binary-setting .imageInput label{\r\n  /*width: 6vw;*/\r\n  min-width: 100px;\r\n}\r\n\r\n</style>\r\n\r\n<form class=\"binary-setting\" action=\"#\">\r\n  <a href=\"#\" class=\"close_button\"></a>\r\n  <hr style=\"visibility:hidden\">\r\n  <div class=\"eleInput\">\r\n    <span class=\"text\">element</span>\r\n\r\n    <label for=\"xName\" class=\"inp\">\r\n      <input type=\"text\" id=\"xName\" placeholder=\"&nbsp;\" pattern=\"^[0-9A-Za-z\\\\s]+$\" required autofocus list=\"indexList\" autocomplete=\"on\">\r\n      <span class=\"label\">x</span>\r\n      <span class=\"border\"></span>\r\n    </label>\r\n\r\n    <span class=\"text\">vs.</span>\r\n\r\n    <label for=\"yName\" class=\"inp\">\r\n      <input type=\"text\" id=\"yName\" placeholder=\"&nbsp;\" pattern=\"^[0-9A-Za-z\\\\s]+$\" required list=\"indexList\" autocomplete=\"on\">\r\n      <span class=\"label\">y</span>\r\n      <span class=\"border\"></span>\r\n    </label>\r\n\r\n\r\n  </div>\r\n\r\n\r\n\r\n  <div class=\"rangeInput\">\r\n    <span class=\"text\">Range</span>\r\n    <!-- x min : x max -->\r\n    <label for=\"x_min\" class=\"inp\">\r\n      <input type=\"number\" id=\"x_min\" placeholder=\"&nbsp;\">\r\n      <span class=\"label\">x min</span>\r\n      <span class=\"border\"></span>\r\n    </label>\r\n\r\n    <span class=\"text\">:</span>\r\n\r\n    <label for=\"x_max\" class=\"inp\">\r\n      <input type=\"number\" id=\"x_max\" placeholder=\"&nbsp;\">\r\n      <span class=\"label\">x max</span>\r\n      <span class=\"border\"></span>\r\n    </label>\r\n\r\n    <span class=\"text\">&</span>\r\n\r\n    <!-- y min : y max-->\r\n\r\n    <label for=\"y_min\" class=\"inp\">\r\n      <input type=\"number\" id=\"y_min\" placeholder=\"&nbsp;\">\r\n      <span class=\"label\">y min</span>\r\n      <span class=\"border\"></span>\r\n    </label>\r\n\r\n    <span class=\"text\">:</span>\r\n\r\n    <label for=\"y_max\" class=\"inp\">\r\n      <input type=\"number\" id=\"y_max\" placeholder=\"&nbsp;\">\r\n      <span class=\"label\">y max</span>\r\n      <span class=\"border\"></span>\r\n    </label>\r\n  </div>\r\n\r\n\r\n  <div class=\"logInput\">\r\n    <label >\r\n      <input type=\"checkbox\" id=\"checkLogX\" tabindex=0>\r\n      <span class=\"checkbox-parts\">log x</span>\r\n    </label>\r\n\r\n    <label>\r\n      <input type=\"checkbox\" id=\"checkLogY\"  tabindex=0>\r\n      <span class=\"checkbox-parts\" >log y</span>\r\n    </label>\r\n  </div>\r\n\r\n\r\n\r\n  <div class=\"imageInput\">\r\n      <span class=\"text\">Image size</span>\r\n      <input class=\"mdl-slider mdl-js-slider\" type=\"range\" id=\"imageSize\" min=\"0.2\" max=\"1\" value=\"0.3\" step=\"0.05\">\r\n\r\n  </div>\r\n\r\n  <div>\r\n    <label for=\"aspect\" class=\"inp\">\r\n      <input type=\"number\" id=\"aspect\" min=\"0.1\" value=\"0.8\" step=\"0.05\" placeholder=\"&nbsp;\">\r\n      <span class=\"label\">aspect ratio</span>\r\n      <span class=\"border\"></span>\r\n    </label>\r\n  </div>\r\n\r\n</form>\r\n    `\r\n    }\r\n};\r\n\n\n//# sourceURL=webpack:///./src/js/Graph-binary-plot.js?");

/***/ }),

/***/ "./src/js/Graph-event-trans-excramate.js":
/*!***********************************************!*\
  !*** ./src/js/Graph-event-trans-excramate.js ***!
  \***********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return TransExcramate; });\n/* harmony import */ var _GraphClass_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./GraphClass.js */ \"./src/js/GraphClass.js\");\n\r\n\r\nlet clicked = false;  // for click events\r\nlet isOff = false; // for double click detction\r\n\r\n\r\nclass TransExcramate {\r\n  static onMouseOver(\r\n    _,\r\n    plotStyle,\r\n    { symbol }\r\n  ) {\r\n    return function (d) {\r\n      const sameId = _GraphClass_js__WEBPACK_IMPORTED_MODULE_0__[\"Graph\"].extractClass(d3.select(this).attr(\"class\"), \"id\");\r\n      const hovered = d3.selectAll(\".\" + sameId)\r\n        .each(d => {\r\n          d.onState = (d.onState === \"selected\")\r\n            ? \"selected\"\r\n            : \"on\"\r\n        })\r\n        .classed(\"base\", false)\r\n        .classed(\"on\", d => d.onState === \"on\")\r\n      hovered.filter(\"circle\")\r\n        .attr(\"r\", plotStyle.r)\r\n        .attr(\"opacity\", plotStyle.opacity);\r\n      hovered.filter(\"path\")\r\n        .attr(\"stroke-width\", plotStyle.strokeWidth)\r\n        .attr(\"opacity\", plotStyle.opacity);\r\n\r\n      d3.selectAll(\"circle.base\")\r\n        .attr(\"opacity\", symbol.outOpacity)\r\n        .attr('r', symbol.outRadius);\r\n      d3.selectAll(\"path.base\")\r\n        .attr(\"opacity\", symbol.outOpacity)\r\n        .attr('stroke-width', symbol.outWidth);\r\n    }\r\n  }\r\n\r\n  static onMouseOut(_, plotStyle, { symbol }) {\r\n    return function (d) {\r\n      const self = d3.select(this);\r\n      const sameId = _GraphClass_js__WEBPACK_IMPORTED_MODULE_0__[\"Graph\"].extractClass(\r\n        self.attr(\"class\"),\r\n        \"id\"\r\n      );\r\n      const hovered = d3.selectAll(\".\" + sameId)\r\n        .each(d => {\r\n          d.onState = (d.onState === \"selected\")\r\n            ? \"selected\"\r\n            : \"base\"\r\n        })\r\n        .classed(\"on\", false)\r\n        .classed(\"base\", d => d.onState === \"base\");\r\n\r\n      d3.selectAll(\"circle.base\")\r\n        .attr(\"opacity\", (isOff) ? symbol.outOpacity : plotStyle.opacity)\r\n        .attr('r', (isOff) ? symbol.outRadius : plotStyle.r);\r\n      d3.selectAll(\"path.base\")\r\n        .attr(\"opacity\", (isOff) ? symbol.outOpacity : plotStyle.opacity)\r\n        .attr('stroke-width', (isOff) ? symbol.outWidth : plotStyle.strokeWidth);\r\n    }\r\n  }\r\n\r\n  static onClick(_, plotStyle, { symbol }) {\r\n    return function (d) {\r\n      const self = d3.select(this);\r\n      const sameId = _GraphClass_js__WEBPACK_IMPORTED_MODULE_0__[\"Graph\"].extractClass(\r\n        self.attr(\"class\"),\r\n        \"id\"\r\n      );\r\n      const selected = d3.selectAll(\".\" + sameId)\r\n      if (self.classed(\"selected\")) {\r\n        d.onState = \"base\";\r\n        selected\r\n          .classed(\"selected\", false)\r\n          .classed(\"base\", true)\r\n      } else {\r\n        d.onState = \"selected\";\r\n        selected\r\n          .classed(\"selected\", true)\r\n          .classed(\"base\", false)\r\n      }\r\n      selected.filter(\"circle\")\r\n        .attr(\"opacity\", plotStyle.opacity)\r\n        .attr(\"r\", plotStyle.r);\r\n      selected.filter(\"path\")\r\n        .attr(\"opacity\", plotStyle.opacity)\r\n        .attr(\"stroke-width\", plotStyle.strokeWidth)\r\n    }\r\n  }\r\n\r\n  static globalClick(merged, plotStyle) {\r\n    return function (d) {\r\n      if (clicked) {\r\n        TransExcramate.globalDoubleClick(merged, plotStyle)\r\n        clicked = false;\r\n        isOff = !isOff;\r\n        return\r\n      }\r\n      clicked = true;\r\n\r\n      // シングルタップ判定\r\n      setTimeout(function () {\r\n        if (clicked) {\r\n\r\n        }\r\n        clicked = false;\r\n      }, 300);\r\n    }\r\n  }\r\n\r\n  static globalDoubleClick(merged, plotStyle) {\r\n    merged.each(d => {\r\n      d.onState = \"base\"\r\n    })\r\n    d3.selectAll(\".plotArea circle\")\r\n      .classed(\"selected\", false)\r\n      .classed(\"base\", true)\r\n      .attr(\"r\", plotStyle.r)\r\n      .attr(\"opacity\", plotStyle.opacity)\r\n    d3.selectAll(\".plotArea path\")\r\n      .classed(\"selected\", false)\r\n      .classed(\"base\", true)\r\n      .attr(\"stroke-width\", plotStyle.strokeWidth)\r\n      .attr(\"opacity\", plotStyle.opacity)\r\n  }\r\n\r\n  static selectByBrush(g_plot_d3) {\r\n    g_plot_d3.call(\r\n      d3.brush()\r\n        .on(\"end\", d => {\r\n          g_plot_d3.selectAll(\"circle\")\r\n            .each(function (d) {\r\n              if (!d3.event.selection) return\r\n              const self = d3.select(this);\r\n              const cx = self.attr(\"cx\")\r\n              const cy = self.attr(\"cy\")\r\n              const [start, end] = d3.event.selection;\r\n              if ((start[0] <= cx && cx <= end[0])\r\n                && (start[1] <= cy && cy <= end[1])) {\r\n                self.attr(\"opacity\", 1)\r\n              } else {\r\n                self.attr(\"opacity\", 0.1)\r\n              }\r\n            })\r\n\r\n        })\r\n    )\r\n  }\r\n\r\n  static updateExtentByBrush(g_plot_d3, callback) {\r\n    g_plot_d3.call(\r\n      d3.brush()\r\n        .on(\"start\", function () {\r\n          d3.event\r\n          g_plot_d3.selectAll(\".selection\")\r\n            .attr(\"display\", \"\")\r\n          g_plot_d3.selectAll(\".handle\")\r\n            .attr(\"display\", \"\")\r\n        }, false)\r\n        .on(\"end\", function () {\r\n          if (!d3.event.selection) return\r\n          callback.end(d3.event);\r\n          g_plot_d3.selectAll(\".selection\")\r\n            .attr(\"display\", \"none\")\r\n          g_plot_d3.selectAll(\".handle\")\r\n            .attr(\"display\", \"none\")\r\n          d3.event.selection = null;\r\n        }, false)\r\n    ).selectAll(\".overlay\") // これ以降を記述すると, brushイベントとcircleのクリックイベントが両立する\r\n      .each(d => d.type === \"selection\")\r\n      .on(\"mousedown\", d => d)\r\n  }\r\n}\n\n//# sourceURL=webpack:///./src/js/Graph-event-trans-excramate.js?");

/***/ }),

/***/ "./src/js/GraphClass.js":
/*!******************************!*\
  !*** ./src/js/GraphClass.js ***!
  \******************************/
/*! exports provided: Graph, GraphManager */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Graph\", function() { return Graph; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"GraphManager\", function() { return GraphManager; });\n/* harmony import */ var _entity_graph_geometry__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./entity/graph_geometry */ \"./src/js/entity/graph_geometry.js\");\n/* harmony import */ var _entity_graph_style__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./entity/graph_style */ \"./src/js/entity/graph_style.js\");\n/* harmony import */ var _entity_text_style__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./entity/text_style */ \"./src/js/entity/text_style.js\");\n\r\n\r\n\r\n\r\nconst testData = [\r\n    { x: 1, y: 2, dummy: 1 },\r\n    { x: 0, y: -1, dummy: 1 },\r\n    { x: 2, y: 10, dummy: 1 }\r\n]\r\n\r\n\r\n/**\r\n * Grpahクラスの作り方\r\n *\r\n * Graphクラスを継承する.\r\n * 次のインスタンスメソッドを定義する\r\n *\r\n * * setStateX\r\n * * setStateY\r\n * * updateSvgSize\r\n * * updateAxisType\r\n * * updateExtent\r\n * * updateTitle\r\n * * replot\r\n * また, つぎのクラスメソッドを定義する\r\n *\r\n * * showPoint\r\n *\r\n * プロット要素へのuiイベントを設定するには次のクラスメソッドを定義する.\r\n *\r\n * * onMouseOver\r\n * * onMouseMove\r\n * * onMouseOut\r\n * * onClick\r\n*/\r\nclass Graph {\r\n    constructor(graphId, settingId, tooltipId) {\r\n        this.graph = \"#\" + graphId;\r\n        this.settingId = \"#\" + settingId;\r\n        this.tooltip = d3.select(\"#\" + tooltipId);\r\n        this.clipPathId = \"clip_\" + graphId\r\n        this.state = {}\r\n        this.graphGeometry = new _entity_graph_geometry__WEBPACK_IMPORTED_MODULE_0__[\"default\"](\r\n            { width: 300, height: 200 }, // figureSize\r\n            { left: 10, right: 15, top: 15, buttom: 10 }, //figurePadding\r\n            { x: 24 + 60, y: 24 + 40 }, // axisOffset\r\n            { width: 0, height: 0 }, // axisSize\r\n        )\r\n        /* svg style */\r\n        this.xlabel = new _entity_text_style__WEBPACK_IMPORTED_MODULE_2__[\"default\"]({ fontSize: 24 })\r\n        this.ylabel = new _entity_text_style__WEBPACK_IMPORTED_MODULE_2__[\"default\"]({ fontSize: 24 })\r\n        this.xtick = new _entity_text_style__WEBPACK_IMPORTED_MODULE_2__[\"default\"]({ fontSize: 20 })\r\n        this.ytick = new _entity_text_style__WEBPACK_IMPORTED_MODULE_2__[\"default\"]({ fontSize: 20 })\r\n\r\n        this.axis = {}\r\n        this.scale = {}\r\n        this.extent = { x: [0, 1], y: [0, 1] }\r\n\r\n        this.magnifyMyData = {\r\n            r: 1.5,\r\n            strokeWidth: 1.2\r\n        }\r\n    }\r\n\r\n    initialize(state) {\r\n        this.readSetting();\r\n        this.setStateX();\r\n        this.setStateY();\r\n        this.updateExtent(state);\r\n        this.updateSvgSize();\r\n        this.createSvg();\r\n        this.createAxis();\r\n        this.update(state);\r\n    }\r\n\r\n    setPlotStyle(state) {\r\n        const {\r\n            r,\r\n            strokeWidth\r\n        } = this.magnifyMyData;\r\n        this.plotStyle = {\r\n            r: Graph.plotStyle(\"Radius\", r, state),\r\n            strokeWidth: Graph.plotStyle(\"Width\", strokeWidth, state),\r\n            opacity: Graph.plotStyle(\"Opacity\", 1, state)\r\n        };\r\n    }\r\n\r\n    static plotStyle(type, multiple, { symbol }) {\r\n        return function (d) {\r\n            const value = (d.onState === \"selected\")\r\n                ? symbol[\"selected\" + type]\r\n                : (d.onState === \"on\")\r\n                    ? symbol[\"on\" + type]\r\n                    : symbol[\"base\" + type];\r\n            return (d.study === \"mine\")\r\n                ? value * multiple\r\n                : value\r\n        }\r\n    }\r\n\r\n    /**\r\n     * replotメソッドにてデータを要素にバインドし,\r\n     * データに従って要素の属性を更新してプロットに反映させる.\r\n     *\r\n     * プロット要素へのuiイベントを他のグラフと連携するためには,\r\n     * このメソッドにて, アプリケーションのuiStateがもつdataを\r\n     * バインドする.\r\n     * また, プロット要素のclass属性の設定や取得には, それぞれ\r\n     * Graph.setClass, Graph.extractClassメソッドを用いる.\r\n     *\r\n     * @param {uiState} state\r\n     */\r\n    replot(state) {\r\n        const { data, symbol, styleClass } = state.data;\r\n        const binded = this.canvas.selectAll(\"circle\")\r\n            .data(data)\r\n        binded.exit().remove();\r\n        const entered = binded.enter().append(\"circle\")\r\n        const merged = entered.merge(binded);\r\n        merged.each(Graph.showPlot());\r\n    }\r\n\r\n    static showPlot() {\r\n        return function (d) {\r\n            const selected = d3.select(this);\r\n        }\r\n    }\r\n\r\n    static setClass(d, styleClass) {\r\n        const styleColumn = (d.hasOwnProperty(styleClass))\r\n            ? d[styleClass]\r\n            : \"none\";\r\n        const study = (d.hasOwnProperty(\"study\"))\r\n            ? d.study\r\n            : \"none\";\r\n\r\n\r\n        return `Binary D${d.id} ${styleColumn} ${study} ${d.onState}`\r\n    }\r\n\r\n    static extractClass(className, selector) {\r\n        const classList = className.split(\" \");\r\n        switch (selector) {\r\n            case \"id\":\r\n                return classList[1];\r\n\r\n            case \"style\":\r\n                return classList[2];\r\n\r\n            case \"study\":\r\n                return classList[3];\r\n            case \"onState\":\r\n                return classList[4];\r\n\r\n            default:\r\n                return false;\r\n\r\n        }\r\n    }\r\n\r\n    createSvg() {\r\n        d3.select(this.graph + \" .plot\").append(\"h1\");\r\n        this.svg = d3.select(this.graph + \" .plot\")\r\n            .append(\"svg\")\r\n        this.clipRect = this.svg.append(\"defs\")\r\n            .append(\"clipPath\")\r\n            .attr(\"id\", this.clipPathId)\r\n            .append(\"rect\");\r\n        this.brushArea = this.svg.append(\"g\")\r\n            .attr(\"class\", \"brushArea\")\r\n            .attr(\"clip-path\", `url(#${this.clipPathId})`)\r\n        this.canvas = this.svg.append(\"g\")\r\n            .attr(\"class\", \"plotArea\")\r\n            .attr(\"clip-path\", `url(#${this.clipPathId})`)\r\n\r\n\r\n        this.updateSvg();\r\n        this.updateTitle();\r\n    }\r\n\r\n\r\n\r\n    createAxis() {\r\n        this.updateAxisSize();\r\n        const size = this.graphGeometry.figureSize\r\n        const padding = this.graphGeometry.figurePadding\r\n        const offset = this.graphGeometry.axisOffset\r\n        const axis = this.graphGeometry.axisSize\r\n        const svg = this.svg;\r\n\r\n        // y軸を登録\r\n        svg.append(\"g\")\r\n            .attr(\"class\", \"y axis\")\r\n            .attr(\"transform\", \"translate(\" + (offset.x + padding.left) + \",\" + (size.height - axis.height - offset.y - padding.buttom) + \")\");\r\n        // y軸ラベルを登録\r\n        svg.select(\".y.axis\")\r\n            .append(\"text\")\r\n            .attr(\"class\", \"ylabel\")\r\n            .attr(\"transform\", \"rotate (-90,\" + -offset.x + \",\" + axis.height * 0.6 + \")\")\r\n            .attr(\"x\", -offset.x)\r\n            .attr(\"y\", axis.height * 0.6)\r\n            .attr(\"fill\", \"black\")\r\n            .attr(\"text-anchor\", \"middle\")\r\n            .text(\"y axis\")\r\n            .style(\"font-size\", this.ylabel.size);\r\n\r\n        // x軸を登録\r\n        svg.append(\"g\")\r\n            .attr(\"class\", \"x axis\")\r\n            .attr(\"transform\", \"translate(\" + (offset.x + padding.left) + \",\" + (size.height - offset.y - padding.buttom) + \")\");\r\n        // x軸ラベルを登録\r\n        svg.select(\".x.axis\")\r\n            .append(\"text\")\r\n            .attr(\"class\", \"xlabel\")\r\n            .attr(\"x\", axis.width * 0.4)\r\n            .attr(\"y\", offset.y * 0.75)\r\n            .attr(\"fill\", \"black\")\r\n            .attr(\"text-anchor\", \"middle\")\r\n            .text(\"x axis\")\r\n            .style(\"font-size\", this.xlabel.size);\r\n\r\n        this.updateAxis();\r\n    }\r\n\r\n    update(state) {\r\n        this.setPlotStyle(state);\r\n        this.readSetting();\r\n        this.setStateX();\r\n        this.setStateY();\r\n        this.updateExtent(state);\r\n        this.updateSvgSize();\r\n        this.updateSvg();\r\n        this.updateTitle();\r\n        this.updateAxis();\r\n        this.replot(state);\r\n    }\r\n\r\n    setTitle(text) {\r\n        d3.select(this.graph).select(\"h1\").text(text);\r\n    }\r\n\r\n    updateTitle() {\r\n    }\r\n\r\n    updateSvg() {\r\n        const size = this.graphGeometry.figureSize\r\n        const padding = this.graphGeometry.figurePadding\r\n        const offset = this.graphGeometry.axisOffset\r\n        const axis = this.graphGeometry.axisSize\r\n\r\n        this.svg.attr(\"width\", size.width)\r\n            .attr(\"height\", size.height);\r\n        this.canvas.attr(\"transform\", `translate(${padding.left + offset.x},${padding.top})`)\r\n            .attr(\"width\", axis.width)\r\n            .attr(\"height\", axis.height)\r\n            .attr(\"fill\", \"gray\")\r\n        this.brushArea.attr(\"transform\", `translate(${padding.left + offset.x},${padding.top})`)\r\n            .attr(\"width\", axis.width)\r\n            .attr(\"height\", axis.height)\r\n    }\r\n\r\n    /**\r\n     * 軸ラベルは\r\n     * インスタンス変数 state.x.name, state.y.name\r\n     */\r\n    updateAxis() {\r\n        this.updateAxisSize();\r\n        this.updateAxisType();\r\n\r\n        const size = this.graphGeometry.figureSize\r\n        const padding = this.graphGeometry.figurePadding\r\n        const offset = this.graphGeometry.axisOffset\r\n        const axis = this.graphGeometry.axisSize\r\n\r\n\r\n        const yAxis = this.svg.select(\"g.y.axis\")\r\n            .attr(\"transform\", `translate(${offset.x + padding.left},${size.height - axis.height - offset.y - padding.buttom} )`)\r\n            .call(this.axis.y);\r\n        yAxis.select(\"path\")//.transition()\r\n            .attr(\"d\", \"M\" + axis.width + \",0H0V\" + axis.height + \"H\" + axis.width)\r\n        yAxis.selectAll(\".tick text\")\r\n            .style(\"font-size\", this.ytick.size)\r\n\r\n\r\n        const xAxis = this.svg.select(\"g.x.axis\")\r\n            .attr(\"transform\", \"translate(\" + (offset.x + padding.left) + \",\" + (size.height - offset.y - padding.buttom) + \")\")\r\n            .call(this.axis.x)\r\n        xAxis.select(\"path\")//.transition()\r\n            .attr(\"d\", \"M0,-\" + axis.height + \"V0H\" + axis.width + \"V-\" + axis.height)\r\n        xAxis.selectAll(\".tick text\")\r\n            .style(\"font-size\", this.xtick.size)\r\n\r\n\r\n        this.svg.select(\"text.ylabel\")\r\n            .attr(\"transform\", `translate(${-(offset.x - this.ylabel.size) * 0.5},${axis.height * 0.5})rotate (-90,0,0)`)\r\n            .attr(\"x\", 0)\r\n            .attr(\"y\", (-40 - this.ylabel.size) * 0.5)\r\n            .style(\"font-size\", this.ylabel.size)\r\n            .transition()\r\n            .text(this.state.y.name || \"y axis\");\r\n\r\n        this.svg.select(\"text.xlabel\")\r\n            .attr(\"x\", axis.width * 0.5)\r\n            .attr(\"y\", (offset.x + this.xlabel.size) * 0.5)\r\n            .style(\"font-size\", this.xlabel.size)\r\n            .transition()\r\n            .text(this.state.x.name || \"x axis\");\r\n\r\n        this.svg.selectAll(\"path.domain\").attr(\"fill\", \"none\");\r\n    }\r\n\r\n    updateAxisSize() {\r\n        const size = this.graphGeometry.figureSize\r\n        const padding = this.graphGeometry.figurePadding\r\n        const offset = this.graphGeometry.axisOffset\r\n\r\n        const { x, y } = this.state;\r\n        const xlabelLength = (x.hasOwnProperty(\"name\"))\r\n            ? x.name.length\r\n            : 0\r\n\r\n        const ylabelLength = (y.hasOwnProperty(\"name\"))\r\n            ? y.name.length\r\n            : 0\r\n\r\n        this.xlabel.size = 24// parseInt(size.width / 20);\r\n        while (xlabelLength * this.xlabel.size > size.width) {\r\n            this.xlabel.size -= 1;\r\n        }\r\n\r\n        this.ylabel.size = 24;\r\n        while (ylabelLength * this.ylabel.size > size.height) {\r\n            this.ylabel.size -= 1;\r\n        }\r\n\r\n        offset.y = this.ylabel.size + 40;\r\n        offset.x = this.xlabel.size + 60;\r\n\r\n        this.graphGeometry.axisSize = {\r\n            width: size.width - offset.x - padding.left - padding.right,\r\n            height: size.height - offset.y - padding.top - padding.buttom\r\n        }\r\n        this.clipRect\r\n            .attr(\"x\", 0)\r\n            .attr(\"y\", 0)\r\n            .attr(\"width\", this.graphGeometry.axisSize.width)\r\n            .attr(\"height\", this.graphGeometry.axisSize.height)\r\n\r\n    }\r\n\r\n    updateSvgSize() {\r\n\r\n    }\r\n\r\n    updateAxisType() {\r\n        const size = this.graphGeometry.figureSize\r\n        const axis = this.graphGeometry.axisSize;\r\n\r\n        this.scale.x = d3.scaleLinear();\r\n        this.scale.x.domain(this.extent.x).range([0, axis.width]);\r\n        this.axis.x = d3.axisBottom(this.scale.x).ticks(5)\r\n        this.axis.x.tickSize(6, -size.height);\r\n\r\n        this.scale.y = d3.scaleLinear();\r\n        this.scale.y.domain(this.extent.y).range([axis.height, 0]);\r\n        this.axis.y = d3.axisLeft(this.scale.y).ticks(5)\r\n        this.axis.y.tickSize(6, -size.width);\r\n    }\r\n\r\n    /**\r\n     * 連携する GraphManagerがtemplateメソッドで生成したHTMLのうち\r\n     * input[type=checkbox, text, number, range], select要素の\r\n     * idとvalueまたはcheckedを読み取る.\r\n     *\r\n     * インスタンス変数stateにidをkeyとしてvalueまたはcheckedを格納する.\r\n     *\r\n     * 設定をもとにインスタンス変数の状態を変更するためには,\r\n     * このメソッドを継承した上で処理を追加する.\r\n    */\r\n    readSetting() {\r\n        [...document.querySelector(this.settingId).querySelectorAll(\"input\")].forEach(d => {\r\n            switch (d.type) {\r\n                case \"checkbox\":\r\n                    this.state[d.id] = d.checked;\r\n                    break;\r\n                case \"text\":\r\n                    this.state[d.id] = d.value;\r\n                    break;\r\n                case \"number\":\r\n                    this.state[d.id] = parseFloat(d.value);\r\n                    break;\r\n                case \"range\":\r\n                    this.state[d.id] = parseFloat(d.value);\r\n                    break;\r\n                default:\r\n                    this.state[d.id] = d.value;\r\n                    break;\r\n            }\r\n        });\r\n        [...document.querySelector(this.settingId).querySelectorAll(\"select\")].forEach(d => {\r\n            this.state[d.id] = d.value;\r\n        })\r\n    }\r\n\r\n    /**\r\n     * グラフの軸ラベルを設定するには, state.x, state.yについて\r\n     * nameを設定する必要がある.\r\n     */\r\n    setStateX() {\r\n        this.state.x = {\r\n            name: \"\"\r\n        }\r\n    }\r\n\r\n    setStateY() {\r\n        this.state.y = {\r\n            name: \"\"\r\n        }\r\n    }\r\n\r\n    updateExtent({ data }) {\r\n\r\n    }\r\n}\r\n\r\n/**\r\n * GraphManagerの作り方\r\n *\r\n * GraphManagerを継承する\r\n *\r\n * コンストラクタで次のインスタンス変数を定義する\r\n *\r\n * * {String} label: グラフ追加ボタンの表示テキスト\r\n * * {String} type: 他のGrpahManagerとかぶらない一意なテキスト\r\n * * {Graph} Graph: プロットを担うGraphクラス\r\n *\r\n * 次のインスタンスメソッドを定義する\r\n *\r\n * * {void -> String} style:\r\n *      プロット設定メニューの表示位置とサイズを定義\r\n * * {uiState -> String} template:\r\n *      プロット設定メニューのHTMLを定義\r\n *      input, select属性が読み取られ, 連携するGraphクラスの\r\n *      インスタンス変数 stateに格納される.\r\n *      state = {\r\n *        [key = id of DOM] : [value = value or checked\r\n *                              attribute of the DOM]\r\n *      }\r\n */\r\nclass GraphManager {\r\n    constructor(uiState) {\r\n        this.graphCount = 0;\r\n        this.label = \"\";\r\n        this.type = \"\";\r\n        this.instance = {};\r\n        this.uiState = uiState;\r\n    }\r\n\r\n    replot() {\r\n        Object.values(this.instance).forEach(g => {\r\n            g.update(this.uiState);\r\n        })\r\n    }\r\n\r\n    incrementCounter() {\r\n        this.graphCount++;\r\n    }\r\n\r\n\r\n    getCount() {\r\n        return this.graphCount;\r\n    }\r\n\r\n    buttonLabel() {\r\n        return this.label;\r\n    }\r\n\r\n    graphType() {\r\n        return this.type;\r\n    }\r\n\r\n    getTemplate() {\r\n        return this.template(this.uiState);\r\n    }\r\n\r\n    getStyle() {\r\n        return this.style();\r\n    }\r\n\r\n    append(graphId, settingId, tooltipId, id) {\r\n        this.instance[id] = new this.Graph(graphId, settingId, tooltipId);\r\n        this.instance[id].initialize(this.uiState)\r\n    }\r\n\r\n    remove(id) {\r\n        this.instance[id] = null;\r\n    }\r\n\r\n    update(id) {\r\n        this.instance[id].update(this.uiState);\r\n    }\r\n};\r\n\n\n//# sourceURL=webpack:///./src/js/GraphClass.js?");

/***/ }),

/***/ "./src/js/app.js":
/*!***********************!*\
  !*** ./src/js/app.js ***!
  \***********************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _top_menu_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./top-menu.js */ \"./src/js/top-menu.js\");\n/* harmony import */ var _menu_file_load_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./menu-file-load.js */ \"./src/js/menu-file-load.js\");\n/* harmony import */ var _menu_symbol_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./menu-symbol.js */ \"./src/js/menu-symbol.js\");\n/* harmony import */ var _menu_legend_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./menu-legend.js */ \"./src/js/menu-legend.js\");\n/* harmony import */ var _menu_test_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./menu-test.js */ \"./src/js/menu-test.js\");\n/* harmony import */ var _graph_appender_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./graph-appender.js */ \"./src/js/graph-appender.js\");\n/* harmony import */ var _Graph_binary_plot_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./Graph-binary-plot.js */ \"./src/js/Graph-binary-plot.js\");\n/* harmony import */ var _Graph_abundance_plot_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./Graph-abundance-plot.js */ \"./src/js/Graph-abundance-plot.js\");\n/* harmony import */ var _graph_btn_setting_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./graph-btn-setting.js */ \"./src/js/graph-btn-setting.js\");\n/* harmony import */ var _graph_btn_delete_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./graph-btn-delete.js */ \"./src/js/graph-btn-delete.js\");\n/* harmony import */ var _graph_btn_save_as_png_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./graph-btn-save_as_png.js */ \"./src/js/graph-btn-save_as_png.js\");\n/* harmony import */ var _graph_btn_refresh_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./graph-btn-refresh.js */ \"./src/js/graph-btn-refresh.js\");\n/* harmony import */ var _ui_updater_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./ui-updater.js */ \"./src/js/ui-updater.js\");\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst initializer = {\r\n\r\n    'legend': {\r\n        'userStyleURL': './data/legend_region.json',\r\n        'commonStyleURL': './css/graph_common.css'\r\n    },\r\n    'userDataSetting': {\r\n        'useDefault': true,\r\n        'url': './data/lava_compositions.csv'\r\n    },\r\n    'referranceDataSetting': {\r\n        'useDefault': true,\r\n        'url': './data/Refferencial_abundance.csv'\r\n    }\r\n}\r\n\r\nconst autoMode = {\r\n    'menu': {\r\n        'symbol': [\r\n            {\r\n                'id': 'outOpacity',\r\n                'min': 0,\r\n                'max': 1,\r\n                'step': 0.1,\r\n                'value': 0.1\r\n            },\r\n            {\r\n                'id': 'baseOpacity',\r\n                'min': 0,\r\n                'max': 1,\r\n                'step': 0.1,\r\n                'value': 0.8\r\n            },\r\n            {\r\n                'id': 'onOpacity',\r\n                'min': 0,\r\n                'max': 1,\r\n                'step': 0.1,\r\n                'value': 1\r\n            },\r\n            {\r\n                'id': 'outRadius',\r\n                'min': 1,\r\n                'max': 12,\r\n                'step': 0.5,\r\n                'value': 6\r\n            },\r\n            {\r\n                'id': 'baseRadius',\r\n                'min': 1,\r\n                'max': 12,\r\n                'step': 0.5,\r\n                'value': 6\r\n            },\r\n            {\r\n                'id': 'onRadius',\r\n                'min': 1,\r\n                'max': 12,\r\n                'step': 0.5,\r\n                'value': 9\r\n            },\r\n            {\r\n                'id': 'outWidth',\r\n                'min': 0,\r\n                'max': 3,\r\n                'step': 0.05,\r\n                'value': 0.25\r\n            },\r\n            {\r\n                'id': 'baseWidth',\r\n                'min': 0,\r\n                'max': 3,\r\n                'step': 0.05,\r\n                'value': 1\r\n            },\r\n            {\r\n                'id': 'onWidth',\r\n                'min': 0,\r\n                'max': 3,\r\n                'step': 0.05,\r\n                'value': 3\r\n            }\r\n        ]\r\n    },\r\n    'plot': [\r\n        {\r\n            'type': 'binary',\r\n            'inputList': [\r\n                { 'id': 'xName', 'type': 'value', 'value': 'SiO2' },\r\n                { 'id': 'yName', 'type': 'value', 'value': 'MgO' },\r\n                { 'id': 'x_min', 'type': 'value', 'value': null },\r\n                { 'id': 'x_max', 'type': 'value', 'value': null },\r\n                { 'id': 'y_min', 'type': 'value', 'value': null },\r\n                { 'id': 'y_max', 'type': 'value', 'value': null },\r\n                { 'id': 'checkLogX', 'type': 'checked', 'value': false },\r\n                { 'id': 'checkLogY', 'type': 'checked', 'value': false },\r\n                { 'id': 'imageSize', 'type': 'value', 'value': 0.3 },\r\n                { 'id': 'aspect', 'type': 'value', 'value': 0.8 }\r\n            ]\r\n        },\r\n        {\r\n            'type': 'abundance',\r\n            'inputList': [\r\n                { 'id': 'eleName', 'type': 'value', 'value': 'La Ce Pr Nd Sm Eu Gd Tb Dy Ho Er Tm Yb Lu' },\r\n                { 'id': 'reserver', 'type': 'value', 'value': 'PM,Sun&McDonough-1989' },\r\n                { 'id': 'y_min', 'type': 'value', 'value': 0.01 },\r\n                { 'id': 'y_max', 'type': 'value', 'value': 1000 },\r\n                { 'id': 'imageSize', 'type': 'value', 'value': 0.7 },\r\n                { 'id': 'aspect', 'type': 'value', 'value': 0.8 }\r\n            ]\r\n\r\n        }\r\n    ]\r\n\r\n}\r\n\r\nconst state = {\r\n    data: [\r\n        { x: 1, y: 2, dummy: 1, study: \"mine\" },\r\n        { x: 0, y: -1, dummy: 1 },\r\n        { x: 2, y: 10, dummy: 1 },\r\n        { y: 0, z: 11, dummy: 1 },\r\n        { y: 1, z: 3, dummy: 1 }\r\n    ],\r\n    symbol: {\r\n        baseOpacity: 0.7,\r\n        baseRadius: 4,\r\n        baseWidth: 1,\r\n        onOpacity: 0.9,\r\n        onRadius: 5,\r\n        onWidth: 3,\r\n        selectedOpacity: 1,\r\n        selectedRadius: 6,\r\n        selectedWidth: 5,\r\n        outOpacity: 0.3,\r\n        outRadius: 2,\r\n        outWidth: 0.25,\r\n    },\r\n    styleClass: \"\",\r\n\r\n    dataStack: [],\r\n}\r\n\r\nconst emitter = new _ui_updater_js__WEBPACK_IMPORTED_MODULE_12__[\"default\"]()\r\n\r\nconst topMenu = new _top_menu_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"](\"fixed-menu-contents\", \"setting_overlay\", emitter, state)\r\nconst ga = new _graph_appender_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"](\"graph_area\", \"setting_menu\", \"setting_overlay\", emitter, state);\r\n\r\n/*\r\n  ここで明示的にemitterにactionを登録スべきか,\r\n  menuアイテムなどを読み込むときに自動的にactionがセットされるようにしたほうがいいか.\r\n*/\r\n\r\nwindow.onresize = ev => {\r\n    emitter.replot();\r\n    emitter.afterReplot();\r\n}\r\n\r\nwindow.onload = ev => {\r\n\r\n    let url = './css/graph_common.css'\r\n\r\n    fetch(url).then(function (data) {\r\n        return data.text();\r\n    }).then(function (text) {\r\n        document.querySelector(\"#graph_style\").innerHTML = (text);\r\n    });\r\n\r\n    $('#graph_area').sortable({\r\n        cursor: \"move\",\r\n        opacity: 0.7,\r\n        handle: \"h1\"\r\n    });\r\n\r\n    topMenu.register(\r\n        _menu_file_load_js__WEBPACK_IMPORTED_MODULE_1__,\r\n        _menu_symbol_js__WEBPACK_IMPORTED_MODULE_2__,\r\n        _menu_legend_js__WEBPACK_IMPORTED_MODULE_3__,\r\n        _menu_test_js__WEBPACK_IMPORTED_MODULE_4__\r\n    );\r\n\r\n    ga.registerBtns(\r\n        _graph_btn_setting_js__WEBPACK_IMPORTED_MODULE_8__,\r\n        _graph_btn_refresh_js__WEBPACK_IMPORTED_MODULE_11__,\r\n        _graph_btn_save_as_png_js__WEBPACK_IMPORTED_MODULE_10__,\r\n        _graph_btn_delete_js__WEBPACK_IMPORTED_MODULE_9__\r\n    )\r\n        .registerGraphManager(\r\n            _Graph_binary_plot_js__WEBPACK_IMPORTED_MODULE_6__[\"default\"],\r\n            _Graph_abundance_plot_js__WEBPACK_IMPORTED_MODULE_7__[\"default\"]\r\n        );\r\n\r\n    ga.setGraphAppendButton({ label: \"Test\", type: \"Test\" });\r\n}\r\n\r\n/*\r\nwindow.onbeforeunload = function (e) {\r\n  return \"Unload ?\";\r\n};\r\n*/\r\n\n\n//# sourceURL=webpack:///./src/js/app.js?");

/***/ }),

/***/ "./src/js/entity/graph_geometry.js":
/*!*****************************************!*\
  !*** ./src/js/entity/graph_geometry.js ***!
  \*****************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return GraphGeometry; });\nfunction checkSizeValidity(sizeDict) {\r\n    if (!sizeDict.hasOwnProperty(\"width\") | !sizeDict.hasOwnProperty(\"height\")) {\r\n        throw new ReferenceError(\"Invalid object for size\")\r\n    }\r\n}\r\n\r\nclass GraphGeometry {\r\n    constructor(figureSize, figurePadding, axisOffset, axisSize) {\r\n        this._figureSize = figureSize\r\n        this._figurePadding = figurePadding\r\n        this._axisOffset = axisOffset\r\n        this._axisSize = axisSize\r\n    }\r\n\r\n    get figureSize() { return this._figureSize }\r\n    set figureSize(size) { checkSizeValidity(size); this._figureSize = size }\r\n    get figurePadding() { return this._figurePadding }\r\n    get axisOffset() { return this._axisOffset }\r\n    get axisSize() { return this._axisSize }\r\n    set axisSize(size) { checkSizeValidity(size); this._axisSize = size }\r\n}\r\n\n\n//# sourceURL=webpack:///./src/js/entity/graph_geometry.js?");

/***/ }),

/***/ "./src/js/entity/graph_style.js":
/*!**************************************!*\
  !*** ./src/js/entity/graph_style.js ***!
  \**************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return GraphStyle; });\n/* harmony import */ var _text_style__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./text_style */ \"./src/js/entity/text_style.js\");\n\r\n\r\n\r\n\r\nclass GraphStyle {\r\n    /**\r\n     *\r\n     * @param {TextStyle} labelStyle\r\n     * @param {TextStyle} tickStyle\r\n     */\r\n    constructor(labelStyle, tickStyle) {\r\n        this._labelStyle = labelStyle\r\n        this._tickStyle = tickStyle\r\n    }\r\n\r\n    get labelStyle() { return self._labelStyle }\r\n\r\n    get tickStyle() { return self._tickStyle }\r\n}\r\n\r\n\r\n/*\r\n    Usecase: get xlabel font\r\n    getXlabelFont(graphStyle): number\r\n*/\r\n\n\n//# sourceURL=webpack:///./src/js/entity/graph_style.js?");

/***/ }),

/***/ "./src/js/entity/text_style.js":
/*!*************************************!*\
  !*** ./src/js/entity/text_style.js ***!
  \*************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return TextStyle; });\nclass TextStyle {\r\n    constructor({ family = \"san-serif\", style = \"normal\", size = \"16\", color = \"black\" } = {}) {\r\n        this._family = family\r\n        this._style = style\r\n        this._size = size\r\n        this._color = color\r\n    }\r\n\r\n    get family() { return this._family }\r\n    set family(fontFamily) { this._family = fontFamily }\r\n    get style() { return this._style }\r\n    set style(fontStyle) { this._style = fontStyle }\r\n    get size() { return this._size }\r\n    set size(fontSize) { this._size = fontSize }\r\n    get color() { return this._color }\r\n    set color(fontColor) { this._color = fontColor }\r\n}\r\n\n\n//# sourceURL=webpack:///./src/js/entity/text_style.js?");

/***/ }),

/***/ "./src/js/graph-appender.js":
/*!**********************************!*\
  !*** ./src/js/graph-appender.js ***!
  \**********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return GraphAppender; });\n\r\nclass GraphAppender {\r\n  constructor(graphAreaId, graphMenuContentsId, overlayId, eventEmitter, uiState) {\r\n    this.exportToEventEmitter(eventEmitter);\r\n    this.emitter = eventEmitter;\r\n    this.uiState = uiState;\r\n    this.graphMenuBtns = [];\r\n    this.graphAreaId = graphAreaId;\r\n    this.graphMenuContentsId = graphMenuContentsId;\r\n    this.overlayId = overlayId;\r\n    this.graphManager = {};\r\n    this.initialize();\r\n    return this;\r\n  }\r\n\r\n  exportToEventEmitter(emitter) {\r\n    emitter.registerAction({ type: \"replot\", action: GraphAppender.replotAll(this) })\r\n  }\r\n\r\n  initialize() {\r\n    this.setGraphAppendButtonArea();\r\n    this.setTooltip();\r\n\r\n    return this;\r\n  }\r\n\r\n  setGraphAppendButtonArea() {\r\n    const div = document.createElement(\"div\");\r\n    div.id = \"graphAppender\";\r\n    div.innerHTML = `\r\n      <form class=\"graphAppender\" id=\"graphAppend_button\"></form>\r\n      `\r\n    document.querySelector(\"#\" + this.graphAreaId).appendChild(div);\r\n    this.dom = document.querySelector(\"#graphAppend_button\");\r\n  }\r\n\r\n  setTooltip() {\r\n    const tooltip = document.createElement(\"span\");\r\n    tooltip.id = \"graph_tooltip\";\r\n    tooltip.setAttribute(\"style\", `\r\n    position: sticky;\r\n    bottom : 0;\r\n    left : 0;\r\n    z-index: 10;\r\n    visibility: hidden;\r\n    padding: 2px 5px;\r\n    border: 1px solid #000;\r\n    border-radius: 3px;\r\n    background-color: #333;\r\n    color: #fff;\r\n    font-size: 1.5rem;\r\n    `)\r\n    document.querySelector(\"#wrapper\").appendChild(tooltip);\r\n    this.tooltipId = tooltip.id;\r\n  }\r\n\r\n\r\n  registerBtns(...graphMenuBtns) {\r\n    this.graphMenuBtns = graphMenuBtns;\r\n    document.querySelector(\"body\").appendChild(\r\n      (_ => {\r\n        const style = document.createElement(\"style\")\r\n        style.innerHTML = this.graphMenuBtns.map(({ style }) => style)\r\n          .reduce((a, b) => a + \"\\n\" + b, \"\");\r\n        style.id = \"graph-menu-btn-style\";\r\n        return style;\r\n      })()\r\n    )\r\n    return this;\r\n  }\r\n\r\n\r\n  /**\r\n   * Graphタイプを追加すると, \r\n   * 1. 追加ボタンを登録\r\n   * 2. 各Graphクラスへのグラフの登録やstate更新をラップする\r\n   */\r\n  registerGraphManager(...GraphManager) {\r\n    GraphManager.forEach(G => {\r\n      const g = new G(this.uiState);\r\n      this.setGraphAppendButton({\r\n        label: g.buttonLabel(),\r\n        type: g.graphType()\r\n      });\r\n      this.graphManager[g.graphType()] = g;\r\n    })\r\n    return this;\r\n  }\r\n\r\n  setGraphAppendButton({ label, type }) {\r\n    const appendBtn = document.createElement(\"input\");\r\n    appendBtn.id = `append${type}`;\r\n    appendBtn.classList.add(\"button\", \"graphAppender\");\r\n    appendBtn.type = \"button\";\r\n    appendBtn.value = `+ ${label}`;\r\n    appendBtn.addEventListener(\r\n      \"click\",\r\n      ev => this.appendGraph(type),\r\n      false\r\n    )\r\n    this.dom.appendChild(appendBtn);\r\n  }\r\n\r\n  appendGraph(type) {\r\n    const G = this.graphManager[type];\r\n    const id = G.getCount();\r\n    this.appendGraphSetting(G);\r\n    this.appendGraphArea(G);\r\n    G.append(\r\n      this.getTypeId(\"graph\", type, id),\r\n      this.getTypeId(\"setting\", type, id),\r\n      this.tooltipId,\r\n      id\r\n    )\r\n    this.emitter.afterReplot();\r\n    G.incrementCounter();\r\n  }\r\n\r\n  appendGraphSetting(G) {\r\n    const emitter = this.emitter;\r\n    const type = G.graphType();\r\n    const id = G.getCount()\r\n    const settingId = this.getTypeId(\"setting\", type, id);\r\n\r\n    const setting = document.createElement(\"div\");\r\n    setting.classList.add(\"graph-setting\");\r\n    setting.innerHTML = G.getTemplate(this.uiState);\r\n    setting.id = settingId;\r\n    setting.setAttribute(\"style\", G.getStyle());\r\n    setting.addEventListener(\r\n      \"change\",\r\n      ev => {\r\n        G.update(id)\r\n        emitter.afterReplot();\r\n      },\r\n      false\r\n    )\r\n    document.querySelector(\"#\" + this.graphMenuContentsId)\r\n      .appendChild(setting);\r\n\r\n    GraphAppender.setOpenClose(\r\n      \"\",\r\n      \"#\" + settingId,\r\n      \"#\" + this.overlayId\r\n    );\r\n\r\n    $(\"#\" + settingId).fadeIn();\r\n    $(\"#\" + this.overlayId).fadeIn();\r\n    $(`#${settingId} input`)[0].focus();\r\n  }\r\n\r\n  /**\r\n   * div#${graphAreaId}\r\n   *  \\-div#graph-${type}_${id}.graph\r\n   *    \\-div#nav-${type}_${id}\r\n   *      \\-ul\r\n   *        \\-li\r\n   *          \\-a#nav_save-${type}-${id}.nav_save\r\n   *        \\-li\r\n   *          \\-a#nav_setting-${type}-${id}.nav_setting\r\n   *    \\-div#plot-${type}_${id}.plot\r\n   *      \\-h1\r\n   *      \\-svg\r\n   * @param {*} G \r\n   */\r\n  appendGraphArea(G) {\r\n    const type = G.graphType();\r\n    const id = G.getCount();\r\n    const graphArea = d3.select(\"#\" + this.graphAreaId);\r\n\r\n    const graph = graphArea.insert(\"div\", \"#graphAppender\")\r\n      .attr(\"class\", \"graph\")\r\n      .attr(\"id\", this.getTypeId(\"graph\", type, id))\r\n\r\n    const graphMenu = graph.append(\"div\");\r\n    graphMenu.attr(\"id\", this.getTypeId(\"nav\", type, id))\r\n      .append(\"ul\")\r\n      .attr(\"style\", this.menuBtnStyle);\r\n\r\n    const graphBtns = graphMenu.select(\"ul\")\r\n      .selectAll(\"li\")\r\n      .data(this.graphMenuBtns)\r\n      .enter()\r\n      .append(\"li\")\r\n      .append(\"a\")\r\n      .attr(\"id\", d => this.getTypeId(d.btnName, type, id))\r\n      .attr(\"class\", d => d.btnName)\r\n      .on(\"click\", d => d.click(\r\n        \"#\" + this.getTypeId(\"graph\", type, id),\r\n        \"#\" + this.getTypeId(\"setting\", type, id),\r\n        \"#\" + this.overlayId,\r\n        id,\r\n        G\r\n      ));\r\n\r\n    const plot = graph.append(\"div\")\r\n      .attr(\"id\", this.getTypeId(\"plot\", type, id))\r\n      .attr(\"class\", \"plot\")\r\n\r\n    $(`#${this.getTypeId(\"graph\", type, id)}`).addClass(\"active\");\r\n  }\r\n\r\n  getTypeId(prefix, type, id) {\r\n    return `${prefix}-${type}_${id}`;\r\n  }\r\n\r\n\r\n  static replotAll(graphAppender) {\r\n    return _ => {\r\n      Object.values(graphAppender.graphManager).forEach(G => {\r\n        G.replot();\r\n      })\r\n    }\r\n  }\r\n\r\n  static setOpenClose(btn, content, overlay) {\r\n    $(btn).click(function () {\r\n      $(content).fadeIn();\r\n      $(content + \" input\")[0].focus();\r\n      $(overlay).fadeIn();\r\n      return false;\r\n    });\r\n    $(overlay).click(function () {\r\n      $(overlay).fadeOut();\r\n      $(content).fadeOut();\r\n      $(\".graph.active\").removeClass(\"active\");\r\n    });\r\n    $(`${content} .close_button`).click(function () {\r\n      $(overlay).fadeOut();\r\n      $(content).fadeOut();\r\n      $(\".graph.active\").removeClass(\"active\");\r\n    });\r\n  }\r\n\r\n};\r\n\r\n\n\n//# sourceURL=webpack:///./src/js/graph-appender.js?");

/***/ }),

/***/ "./src/js/graph-btn-delete.js":
/*!************************************!*\
  !*** ./src/js/graph-btn-delete.js ***!
  \************************************/
/*! exports provided: btnName, style, click */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"btnName\", function() { return btnName; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"style\", function() { return style; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"click\", function() { return click; });\nconst btnName = \"nav_delete\";\r\n\r\nconst style = `\r\na.nav_delete::before{\r\n  content:url(../image/ic_delete_sweep_black_24px.svg);\r\n  position: relative;\r\n\r\n}\r\n\r\na.nav_delete:hover::before,\r\na.nav_delete:focus::before{\r\n  transition: all .3s;\r\n  content:url(../image/ic_delete_sweep_black_24px_hover.svg);\r\n}\r\n`\r\n\r\nfunction click(graph, setting, _, id, GraphManager) {\r\n    $(graph).remove();\r\n    $(setting).remove();\r\n    GraphManager.remove(id);\r\n}\r\n\n\n//# sourceURL=webpack:///./src/js/graph-btn-delete.js?");

/***/ }),

/***/ "./src/js/graph-btn-refresh.js":
/*!*************************************!*\
  !*** ./src/js/graph-btn-refresh.js ***!
  \*************************************/
/*! exports provided: btnName, style, click */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"btnName\", function() { return btnName; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"style\", function() { return style; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"click\", function() { return click; });\nconst btnName = \"nav_refresh\";\r\n\r\nconst style = `\r\na.${btnName}::before{\r\n  content:url(../image/sync-alt-solid.svg);\r\n  position: relative;\r\n}\r\n\r\na.${btnName}:hover::before,\r\na.${btnName}:focus::before{\r\n  transition: all .3s;\r\n  content:url(../image/sync-alt-solid_hover.svg);\r\n}\r\n`\r\n\r\nfunction click(graph, setting, _, id, GraphManager) {\r\n    GraphManager.update(id);\r\n}\r\n\n\n//# sourceURL=webpack:///./src/js/graph-btn-refresh.js?");

/***/ }),

/***/ "./src/js/graph-btn-save_as_png.js":
/*!*****************************************!*\
  !*** ./src/js/graph-btn-save_as_png.js ***!
  \*****************************************/
/*! exports provided: btnName, style, click */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"btnName\", function() { return btnName; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"style\", function() { return style; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"click\", function() { return click; });\nconst btnName = \"nav_save\";\r\n\r\nconst style = `\r\na.nav_save::before{\r\n  content:url(../image/ic_file_download_24px.svg);\r\n  position: relative;\r\n\r\n}\r\n\r\na.nav_save:hover::before,\r\na.nav_save:focus::before{\r\n  transition: all .3s;\r\n  content:url(../image/ic_file_download_24px_hover.svg);\r\n}\r\n`\r\n\r\nfunction click(graph, setting, __) {\r\n    const svg = d3.select(graph).select(\"svg\")\r\n    const style = [\"graph_style\", \"legendStyle\"]\r\n        .map(id => {\r\n            try {\r\n                return document.querySelector(\"#\" + id).innerHTML\r\n            } catch (e) {\r\n                return \"\";\r\n            }\r\n        })\r\n        .reduce((a, b) => a + b, \"\");\r\n    svg.insert(\"style\", \"g\")\r\n        .attr(\"type\", \"text/css\")\r\n        .text(style);\r\n    const svgDOM = svg._groups[0][0];\r\n\r\n    const canvas = document.createElement(\"canvas\");\r\n    canvas.width = svgDOM.width.baseVal.value;\r\n    canvas.height = svgDOM.height.baseVal.value;\r\n    const svgData = new XMLSerializer().serializeToString(svgDOM);\r\n\r\n    const ctx = canvas.getContext(\"2d\");\r\n    ctx.rect(0, 0, canvas.width, canvas.height);\r\n    ctx.fillStyle = \"white\";\r\n    ctx.fill();\r\n\r\n    const image = new Image;\r\n    image.onload = function () {\r\n        ctx.drawImage(image, 0, 0);\r\n        // Optional: 自動でダウンロードさせる場合\r\n        try {\r\n            var xName = d3.select(graph).select(\"text.xlabel\").text();\r\n        } catch (e) {\r\n            var xName = \"x\";\r\n        }\r\n\r\n        try {\r\n            var yName = d3.select(graph).select(\"text.ylabel\").text();\r\n        } catch (e) {\r\n            var yName = \"y\";\r\n        }\r\n\r\n        xName = xName.replace(/\\//g, \"_\")\r\n            .replace(/#/g, \"N\")\r\n            .replace(/[\\s\\:\\*\\\"\\'\\<\\>\\?\\|\\\\]/g, \"\"); //\"\r\n        yName = yName.replace(/\\//g, \"_\")\r\n            .replace(/#/g, \"N\")\r\n            .replace(/[\\s\\:\\*\\\"\\'\\<\\>\\?\\|\\\\]/g, \"\"); //\"\r\n\r\n        d3.select(\"body\").append(\"a\")\r\n            .attr(\"id\", \"image-file\")\r\n            .attr(\"class\", \"hidden\")\r\n            .attr(\"type\", \"application/octet-stream\")\r\n            .attr(\"href\", canvas.toDataURL(\"image/png\"))\r\n            .attr(\"download\", xName + \"-vs-\" + yName + \".png\")\r\n            .text(\"Download as Image\")\r\n\r\n        $(\"#image-file\")[0].click();\r\n\r\n        $(\"canvas\").remove();\r\n        $(\"#image-file\").remove();\r\n\r\n        svg.selectAll(\"style\").remove();\r\n    }\r\n\r\n    image.src = \"data:image/svg+xml;charset=utf-8;base64,\" + btoa(unescape(encodeURIComponent(svgData)));\r\n\r\n}\r\n\n\n//# sourceURL=webpack:///./src/js/graph-btn-save_as_png.js?");

/***/ }),

/***/ "./src/js/graph-btn-setting.js":
/*!*************************************!*\
  !*** ./src/js/graph-btn-setting.js ***!
  \*************************************/
/*! exports provided: btnName, style, click */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"btnName\", function() { return btnName; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"style\", function() { return style; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"click\", function() { return click; });\nconst btnName = \"nav_setting\";\r\n\r\nconst style = `\r\na.nav_setting::before{\r\n  content:url(../image/ic_settings_black_24px.svg);\r\n  position: relative;\r\n  stroke : #eeeeee;\r\n}\r\n\r\na.nav_setting:hover::before,\r\na.nav_setting:focus::before{\r\n  transition: all .3s;\r\n  content:url(../image/ic_settings_black_24px_hover.svg);\r\n}\r\n`\r\n\r\nfunction click(graph, setting, overlay) {\r\n    //return ev => {\r\n    $(\".graph.active\").removeClass(\"active\");\r\n    $(graph).addClass(\"active\");\r\n    $(overlay).fadeIn();\r\n    $(setting).fadeIn();\r\n    $(`${setting} input`)[0].focus();\r\n    //}\r\n}\r\n\n\n//# sourceURL=webpack:///./src/js/graph-btn-setting.js?");

/***/ }),

/***/ "./src/js/lib/funcTools.js":
/*!*********************************!*\
  !*** ./src/js/lib/funcTools.js ***!
  \*********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n\r\nconst Y = f => {\r\n    return (\r\n        x => f(y => x(x)(y))\r\n    )(\r\n        x => f(y => x(x)(y))\r\n    )\r\n}\r\n\r\nconst recursive = base => a => n => base(n, a);\r\n\r\nconst recursiveExtender = custom => templateFunc => f => templateFunc(custom(f));\r\n\r\n\r\nconst memoize = cache => f => {\r\n    return arg => {\r\n        if (!(arg in cache)) {\r\n\r\n            cache[arg] = f(arg);\r\n        }\r\n        return cache[arg];\r\n    }\r\n};\r\n\r\nconst trace = f => arg => {\r\n    console.log(`called with argument ${arg}`);\r\n    return f(arg)\r\n};\r\n\r\nconst compose = (...fs) => x => fs.reduceRight((acc, f) => f(acc), x);\r\nconst pip = (...fs) => x => fs.reduce((acc, f) => f(acc), x);\r\n\r\nconst G = {\r\n    take: n => function* (g) {\r\n        for (let i = 0; i < n; i++) {\r\n            let x = g.next();\r\n            if (x.done) return;\r\n            yield x.value;\r\n        }\r\n    },\r\n\r\n    nest: f => function* (x) {\r\n        let y = x;\r\n        while (true) {\r\n            yield y;\r\n            y = f(y);\r\n        }\r\n    }\r\n};\r\n\r\n\r\n\r\n\r\nconst take = n => [...Array(n)]\r\n\r\nconst fold = f => x => (acc, e) => acc.length === 0 ? [f(x, e)] : [...acc, f(acc[acc.length - 1], e)];\r\n\r\nconst range = (ini, fin, step = 1) => [...Array(Math.ceil((fin - ini) / step))].map((_, i) => ini + step * i);\r\n\r\nconst spread = (...objs) => [...objs].reduce((a, b) => Object.assign(a, b), {});\r\n\r\nconst transduce = (compose => {\r\n    const mapping = f => reducer => (acc, e) => reducer(acc, f(e));\r\n    const filtering = f => reducer => (acc, e) =>\r\n        !f(e)\r\n            ? acc\r\n            : reducer(acc, e);\r\n    const folding = f => x => reducer => (acc, e) =>\r\n        acc.length === 0\r\n            ? reducer(acc, f(x, e))\r\n            : reducer(acc, f(acc[acc.length - 1], e));\r\n    const taking = n => reducer => (acc, e) =>\r\n        acc.length < n\r\n            ? reducer(acc, e)\r\n            : reducer(acc, undefined);\r\n    const concatReducer = (acc, e) =>\r\n        e || e === 0\r\n            ? [...acc, e]\r\n            : [...acc];\r\n\r\n    const _intoArray = ts => xs => xs.reduce(ts(concatReducer), []);\r\n    const intoArray = (...fs) => xs => xs.reduce(compose(...fs)(concatReducer), []);\r\n\r\n\r\n    return {\r\n        mapping,\r\n        filtering,\r\n        folding,\r\n        taking,\r\n        intoArray,\r\n        _intoArray\r\n    }\r\n})(compose)\r\n\r\nconst statefullTransducer = (({ mapping, filtering }, compose) => {\r\n    const indexing = ini => mapping(e => [ini++, e])\r\n\r\n    const slicing = (m, n) => compose(\r\n        indexing(0),\r\n        filtering(([i, e]) => m <= i && i < n),\r\n        mapping(([i, e]) => e)\r\n    );\r\n\r\n    return {\r\n        indexing,\r\n        slicing\r\n    }\r\n})(transduce, compose)\r\n\r\n\r\nconst zipWith = f => xs => ys =>\r\n    xs.length < ys.length ? xs.map((e, i) => f(e, ys[i])) : ys.map((e, i) => f(xs[i], e));\r\n\r\nconst zip = xs => ys =>\r\n    xs.length < ys.length ? xs.map((e, i) => [e, ys[i]]) : ys.map((e, i) => [xs[i], e]);\r\n\r\nconst zips = (...arr) =>\r\n    transduce._intoArray(\r\n        transduce.mapping(i => arr.map(a => a[i]))\r\n    )(range(0, Math.min(...arr.map(a => a.length))));\r\n\r\nconst Dataframe = (({\r\n    intoArray, mapping, _intoArray\r\n}, zips, spread) => {\r\n\r\n    const toDataframe = entries => {\r\n        //console.log(entries);\r\n        const keys = Object.keys(entries[0]);\r\n        return spread(...keys.map(k => ({ [k]: _intoArray(mapping(e => e[k]))(entries) })))\r\n    }\r\n\r\n    const toEntries = df => {\r\n        const keys = Object.keys(df);\r\n        return _intoArray(\r\n            mapping(\r\n                values => _intoArray(\r\n                    mapping(([k, v]) => ({ [k]: v }))\r\n                )(zips(keys, values))\r\n                    .reduce((a, b) => Object.assign(a, b), {})\r\n            )\r\n        )(zips(...Object.values(df)))\r\n    }\r\n\r\n\r\n    const _intoDataframe = ts => df => toDataframe(\r\n        _intoArray(ts)(toEntries(df))\r\n    )\r\n\r\n    const intoDataframe = (...fs) => df => toDataframe(\r\n        intoArray(...fs)(toEntries(df))\r\n    )\r\n\r\n    const mapEntries = f => mapping(e => Object.assign(e, f(e)))\r\n\r\n    const table = df => console.table(toEntries(df))\r\n    return {\r\n        toDataframe,\r\n        intoDataframe,\r\n        _intoDataframe,\r\n        mapEntries,\r\n        toEntries,\r\n        table\r\n    }\r\n})(transduce, zips, spread);\r\n\r\n\r\n\r\nconst tee = f => a => {\r\n    f(a);\r\n    return a;\r\n}\r\n\r\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\r\n    Y,\r\n    recursive,\r\n    recursiveExtender,\r\n    memoize,\r\n    trace,\r\n    compose,\r\n    pip,\r\n    G,\r\n    zipWith,\r\n    zip,\r\n    zips,\r\n    fold,\r\n    range,\r\n    spread,\r\n    take,\r\n    transduce,\r\n    statefullTransducer,\r\n    Dataframe,\r\n    tee\r\n});\r\n\n\n//# sourceURL=webpack:///./src/js/lib/funcTools.js?");

/***/ }),

/***/ "./src/js/lib/textParser_esm.js":
/*!**************************************!*\
  !*** ./src/js/lib/textParser_esm.js ***!
  \**************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return TextParser; });\n\r\nconst getDelimiter = fileType => {\r\n    switch (fileType) {\r\n        case \"csv\":\r\n            return \",\"\r\n            break;\r\n        case \"tsv\":\r\n            return \"\\t\"\r\n            break;\r\n        default:\r\n            return \" \"\r\n            break;\r\n    }\r\n}\r\n\r\n/*\r\nconst fs = (typeof require !== \"undefined\")\r\n  ? require(\"fs\")\r\n  : null;\r\n*/\r\n\r\nclass TextParser {\r\n    constructor() { }\r\n\r\n    /* text2Object\r\n         prop0 , prop1 , prop2 , ...\r\n         v00, v01, v02, ...\r\n         v10, v11, V12, ...\r\n  \r\n         ->\r\n  \r\n         [\r\n           {key:0,value:{\r\n             prop0: v00,\r\n             prop1: v01,\r\n             ...\r\n           }},\r\n           {key:1,value:{\r\n             prop0: v10,\r\n             prop1: v11,\r\n             ...\r\n           }},\r\n           ...\r\n         ]\r\n       */\r\n    static text2Object(content, fileType) {\r\n        //>> tsvファイルから配列を作成(tsvObj)\r\n        var obj = new Array();\r\n\r\n        if (content.match(/\\r/)) var raw = content.split(\"\\r\\n\");\r\n        else raw = content.split(\"\\n\");\r\n\r\n        if (fileType == 'tsv') var delimiter = '\\t';\r\n        else if (fileType == 'csv') delimiter = ',';\r\n        else delimiter = ' ';\r\n\r\n        var rawNum = raw.length;\r\n        var key = raw[0].replace(/\"/g, '').split(delimiter);\r\n        var columnNum = key.length;\r\n\r\n        //console.log(key);\r\n\r\n        for (let i = 1; i < rawNum; i++) {\r\n            let column = raw[i].replace(/\"/g, '').split(delimiter);\r\n            if (column.length < columnNum) break;\r\n            obj.push({ \"key\": i - 1, \"value\": Object() });\r\n            for (var j = 0; j < columnNum; j++) {\r\n                obj[i - 1][\"value\"][key[j]] = column[j];\r\n            };\r\n        };\r\n\r\n        return obj;\r\n    }\r\n\r\n\r\n    /* csv2Json\r\n      prop , subprop1 , subprop2 , ...\r\n      prop1, subprop11, subprop22, ...\r\n      prop2, subprop21, subprop22, ...\r\n  \r\n      to (primaryKey = \"prop\")\r\n  \r\n      {\r\n        prop1:{\r\n          subprop1:subprop11,\r\n          subprop2:subprop22,\r\n          ...\r\n        },\r\n        prop2:{\r\n          subprop1: subprop21,\r\n          subprop2: subprop22,\r\n          ...\r\n        },\r\n        ...\r\n      }\r\n    */\r\n    static csv2Json(content, primaryKey = null, separator = \",\") {\r\n        let obj = {}\r\n\r\n        const row = (content.match(/\\r/)) ?\r\n            content.split(\"\\r\\n\") : content.split(\"\\n\");\r\n\r\n        const rowNum = row.length;\r\n        const key = row[0].replace(/\"/g, '').split(separator);\r\n        const columnNum = key.length;\r\n\r\n        const pK = (key.indexOf(primaryKey) > -1) ? key.indexOf(primaryKey) : 0;\r\n\r\n        for (let i = 1; i < rowNum; i++) {\r\n\r\n\r\n            column = row[i].replace(/\"/g, '').split(separator);\r\n            obj[column[pK]] = {};\r\n            if (column.length < columnNum) break;\r\n\r\n            for (let j = 0; j < columnNum; j++) {\r\n                if (j !== pK) obj[column[pK]][key[j]] = column[j];\r\n            }\r\n        }\r\n        return obj;\r\n    }\r\n\r\n\r\n\r\n    static text2Array(content, fileType) {\r\n        //>> tsvファイルから配列を作成(tsvObj)\r\n        var array = new Array();\r\n\r\n        if (content.match(/\\r/)) var raw = content.split(\"\\r\\n\");\r\n        else raw = content.split(\"\\n\");\r\n\r\n        if (fileType == 'tsv') var delimiter = '\\t';\r\n        else if (fileType == 'csv') delimiter = ',';\r\n        else delimiter = ' ';\r\n\r\n        var rawNum = raw.length;\r\n        var key = raw[0].replace(/\"/g, '').split(delimiter);\r\n        var columnNum = key.length;\r\n\r\n        //console.log(key);\r\n\r\n        for (i = 0; i < rawNum; i++) {\r\n            column = raw[i].replace(/\"/g, '').split(delimiter);\r\n\r\n            if (column.length < columnNum) break;\r\n            array[i] = [];\r\n            for (var j = 0; j < columnNum; j++) {\r\n                array[i][j] = column[j];\r\n            };\r\n        };\r\n\r\n        return array;\r\n    };\r\n\r\n    /** text2Dataframe\r\n     *\r\n     * column0,column1,...\r\n     *  d00, d10,\r\n     *  d01, d11\r\n     *\r\n     * ->\r\n     *\r\n     * df = {\r\n           column0 : [d00,d01,],\r\n           column1 : [d10,d11,],\r\n           ...\r\n      }\r\n    */\r\n    static text2Dataframe(content, fileType) {\r\n        const obj = {};\r\n\r\n        const row = (content.match(/\\r/))\r\n            ? content.split(\"\\r\\n\")\r\n            : content.split(\"\\n\");\r\n\r\n        const delimiter = getDelimiter(fileType);\r\n\r\n        const rawNum = row.length;\r\n        const key = row[0].replace(/\"/g, '').split(delimiter);\r\n        const columnNum = key.length;\r\n\r\n        key.map(v => {\r\n            obj[v] = []\r\n        });\r\n\r\n        //console.log(key);\r\n\r\n        for (let i = 1; i < rawNum; i++) {\r\n            let column = row[i].replace(/\"/g, '').split(delimiter);\r\n\r\n            if (column.length < columnNum) break;\r\n\r\n            for (var j = 0; j < columnNum; j++) {\r\n                obj[key[j]].push(column[j]);\r\n            };\r\n        };\r\n\r\n        return obj\r\n    }\r\n\r\n    static array2Text(array, fileType) {\r\n        let blob = '';\r\n\r\n        if (fileType == 'tsv') var delimiter = '\\t';\r\n        else if (fileType == 'csv') delimiter = ',';\r\n        else delimiter = ' ';\r\n\r\n        end = new RegExp(delimiter + \"$\");\r\n\r\n        array.map((v) => {\r\n            blob += '\"' + v.toString().replace('\"', '') + '\"';\r\n            blob += delimiter;\r\n        })\r\n\r\n\r\n        blob = blob.replace(end, '');\r\n\r\n        return blob;\r\n    }\r\n\r\n    /* obj2Table\r\n     * オブジェクトから markdownの表を作成する\r\n     *\r\n     * obj : {\r\n           index0:{\r\n                  column0:v00,\r\n                  column1:v01\r\n            },\r\n         index1:{\r\n              column0:v10,\r\n              column1:v11\r\n          }\r\n      }\r\n  \r\n      =>\r\n  \r\n      |       |column0|column1|\r\n      | :---: | :---: | :---: |\r\n      |index0 |  v00  |  v01  |\r\n      |index1 |  v10  |  v11  |\r\n    */\r\n    static obj2Table(obj) {\r\n        let str = \"\"\r\n        const index = Object.keys(obj)\r\n        const column = Object.keys(obj[index[0]]);\r\n\r\n        str += \"| |\";\r\n        for (let key of column) {\r\n            str += key + \"|\";\r\n        }\r\n        str += \"\\n\";\r\n        str += \"|:---:|\";\r\n        for (let key of column) {\r\n            str += \":---:|\";\r\n        }\r\n        str += \"\\n\";\r\n\r\n        for (let key of index) {\r\n            str += \"|\" + key + \"|\";\r\n            for (let c of column) {\r\n                str += obj[key][c] + \"|\"\r\n            }\r\n            str += \"\\n\"\r\n        }\r\n        return str;\r\n    }\r\n\r\n    static read_csv(path) {\r\n        return TextParser.text2Dataframe(fs.readFileSync(path, \"utf-8\"), \"csv\")\r\n    }\r\n\r\n    static read_json(path) {\r\n        return JSON.parse(fs.readFileSync(path, \"utf-8\"))\r\n    }\r\n\r\n}\r\n\n\n//# sourceURL=webpack:///./src/js/lib/textParser_esm.js?");

/***/ }),

/***/ "./src/js/menu-file-load.js":
/*!**********************************!*\
  !*** ./src/js/menu-file-load.js ***!
  \**********************************/
/*! exports provided: template, eventSetter, option, style */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"template\", function() { return template; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"eventSetter\", function() { return eventSetter; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"option\", function() { return option; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"style\", function() { return style; });\n/* harmony import */ var _lib_textParser_esm__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./lib/textParser_esm */ \"./src/js/lib/textParser_esm.js\");\n/* harmony import */ var _lib_funcTools__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./lib/funcTools */ \"./src/js/lib/funcTools.js\");\n\r\n\r\n\r\nconst {\r\n    Dataframe,\r\n    transduce,\r\n    statefullTransducer\r\n} = _lib_funcTools__WEBPACK_IMPORTED_MODULE_1__[\"default\"];\r\nconst {\r\n    mapping,\r\n    intoArray\r\n} = transduce;\r\nconst {\r\n    indexing\r\n} = statefullTransducer;\r\nconst {\r\n    toEntries,\r\n    mapEntries\r\n} = Dataframe;\r\n\r\n\r\nconst load = ( false) ?\r\n    undefined\r\n    : __webpack_require__(/*! node-fetch */ \"./node_modules/node-fetch/browser.js\");\r\n\r\n\r\nfunction template(state) {\r\n    return `\r\n  <style>\r\n    #menu-file-load input.button{\r\n    cursor: pointer;\r\n    min-width: 10vw;\r\n    font-size: 1.5rem;\r\n    margin: 5px 0px;\r\n    padding:10px;\r\n  }\r\n  </style>\r\n\r\n  <form id=\"menu-file-load\" class=\"selectFile\" action=\"#\">\r\n    <a href=\"#\" class=\"close_button\" id=\"close_selectFile\"></a>\r\n    <hr style=\"visibility:hidden\">\r\n    <label>\r\n      <input type=\"file\" id=\"selectFileMain\" accept=\".csv\" required>\r\n      <span class=\"file-parts\">Select plot file (.CSV)</span>\r\n    </label>\r\n    <input class=\"button\" type=\"button\" id=\"use_test_data\" value=\"Use test data\">\r\n    <hr>\r\n    Selected file: <span id=\"selectedMainFile\"></span>\r\n\r\n    <hr>\r\n    <label>\r\n      <input type=\"file\" id=\"selectFileRef\" accept=\".csv\" >\r\n      <span class=\"file-parts\">Select Abundance file (.CSV)</span>\r\n    </label>\r\n    <input class=\"button\" type=\"button\" id=\"use_test_ref\" value=\"Use default\">\r\n    <hr>\r\n    Selected file: <span id=\"selectedRefFile\"></span>\r\n\r\n  </form>`\r\n};\r\n\r\nconst createDataColumnIndex = (index_datalist, { data }) => {\r\n    if (data.length <= 0) return false;\r\n    const options = d3.select(index_datalist)\r\n        .selectAll(\"option\")\r\n        .data(Object.keys(data[0]))\r\n    options.exit().remove();\r\n    const entered = options.enter().append(\"option\");\r\n    entered.merge(options)\r\n        .attr(\"value\", d => d);\r\n}\r\n\r\nfunction eventSetter(emitter, uiState) {\r\n    const indexListId = \"indexList\"\r\n    const datalist = document.createElement(\"datalist\")\r\n    datalist.id = indexListId\r\n    document.querySelector(\"body\").appendChild(datalist)\r\n\r\n    document.getElementById(\"use_test_data\").onclick = function (ev) {\r\n        const url = \"./data/lava_compositions.csv\";\r\n        load(url).then(function (response) {\r\n            return response.text();\r\n        }).then(function (text) {\r\n\r\n            uiState.data = intoArray(\r\n                indexing(0),\r\n                mapping(([i, d]) => Object.assign(d, { id: i })),\r\n                mapEntries(d => ({ dummy: 1, onState: \"base\" })),\r\n            )(toEntries(_lib_textParser_esm__WEBPACK_IMPORTED_MODULE_0__[\"default\"].text2Dataframe(text, \"csv\")))\r\n\r\n            document.querySelector(\"#selectedMainFile\").innerHTML = (url);\r\n            createDataColumnIndex(\"#\" + indexListId, uiState);\r\n        })\r\n    };\r\n\r\n\r\n    document.getElementById('use_test_ref').onclick = function (ev) {\r\n        const url = \"./data/Refferencial_abundance.csv\";\r\n\r\n        load(url).then(function (response) {\r\n            return response.text();\r\n        }).then(function (text) {\r\n            uiState.refData = toEntries(_lib_textParser_esm__WEBPACK_IMPORTED_MODULE_0__[\"default\"].text2Dataframe(text, \"csv\"));\r\n\r\n\r\n            document.querySelector(\"#selectedRefFile\").innerHTML = (url);\r\n        })\r\n\r\n    }\r\n\r\n    document.getElementById(\"use_test_data\").click();\r\n    document.getElementById('use_test_ref').click();\r\n\r\n    /* Button for use user data */\r\n    document.getElementById(\"selectFileMain\").onchange = function (ev) {\r\n        var file = ev.target.files;\r\n        var reader = new FileReader();\r\n\r\n        reader.readAsText(file[0]);\r\n        //console.log(file)\r\n        reader.onload = function (ev) {\r\n\r\n            uiState.data = intoArray(\r\n                indexing(0),\r\n                mapping(([i, d]) => Object.assign(d, { id: i })),\r\n                mapEntries(d => ({ dummy: 1, onState: \"base\" })),\r\n            )(toEntries(_lib_textParser_esm__WEBPACK_IMPORTED_MODULE_0__[\"default\"].text2Dataframe(reader.result, \"csv\")))\r\n\r\n            emitter.replot();\r\n            emitter.afterReplot();\r\n            createDataColumnIndex(\"#\" + indexListId, uiState);\r\n        };\r\n\r\n        for (var i = 0; i < file.length; i++) {\r\n            document.querySelector(\"#selectedMainFile\").innerHTML = (file[i].name + \"\\n\");\r\n        }\r\n    };\r\n\r\n    /* Button for user defined refferance data */\r\n    document.getElementById(\"selectFileRef\").onchange = function (ev) {\r\n        var file = ev.target.files;\r\n        var reader = new FileReader();\r\n\r\n        reader.readAsText(file[0]);\r\n        //console.log(file)\r\n        reader.onload = function (ev) {\r\n            uiState.refData = toEntries(_lib_textParser_esm__WEBPACK_IMPORTED_MODULE_0__[\"default\"].text2Dataframe(reader.result, \"csv\"));\r\n\r\n            emitter.replot();\r\n            emitter.afterReplot();\r\n        };\r\n\r\n        for (var i = 0; i < file.length; i++) {\r\n            document.querySelector(\"#selectedRefFile\").innerHTML = (file[i].name + \"\\n\");\r\n        }\r\n    }\r\n};\r\n\r\nconst option = {\r\n    label: \"Select file\",\r\n    draggable: false\r\n}\r\n\r\nconst style = `\r\n  left: 5%;\r\n  width: 40vw;\r\n  overflow: auto;\r\n  `\r\n\n\n//# sourceURL=webpack:///./src/js/menu-file-load.js?");

/***/ }),

/***/ "./src/js/menu-legend.js":
/*!*******************************!*\
  !*** ./src/js/menu-legend.js ***!
  \*******************************/
/*! exports provided: template, exportToEmitter, eventSetter, option, style */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"template\", function() { return template; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"exportToEmitter\", function() { return exportToEmitter; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"eventSetter\", function() { return eventSetter; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"option\", function() { return option; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"style\", function() { return style; });\n\r\n\r\nconst template = uiState => `\r\n  <style>\r\n  #form_legend input.button{\r\n    cursor: pointer;\r\n    min-width: 10vw;\r\n    font-size: 1.5rem;\r\n    margin: 5px 0px;\r\n    padding: 10px;\r\n  }\r\n\r\n\r\n  #legend_form{\r\n    margin: 5px;\r\n  }\r\n\r\n    #legend_table{\r\n      margin: 0px;\r\n    }\r\n\r\n      #legend_table input.color{\r\n        background-color: #fff;\r\n        border: none;\r\n        padding:0px;\r\n      }\r\n\r\n      #legendKey{\r\n        color: #fff;\r\n        background: none;\r\n        border:none;\r\n        font-weight: bold;\r\n        text-align: center;\r\n      }\r\n\r\n  </style>\r\n\r\n  <div id=\"legend_form\">\r\n  <form id=\"form_legend\">\r\n    <a href=\"#\" class=\"close_button\" id=\"close_legendForm\"></a>\r\n    <hr style=\"visibility:hidden\">\r\n    <label>\r\n      <input id=\"legendJSON\" type=\"file\" accept=\".json\" >\r\n      <span class=\"file-parts\">Select legend file(.JSON)</span>\r\n    </label>\r\n    <input id=\"legendAutoLoad\" type='button' style=\"display:none;\">\r\n    <hr>\r\n    Selected file:\r\n    <span id=\"legendFileLabel\"></span>\r\n    <hr>\r\n    <input id=\"hideAll_button\" class=\"button\" type=\"button\" value=\"Hide all\">\r\n    <input id=\"showAll_button\" class=\"button\" type=\"button\" value=\"Show all\">\r\n  </form>\r\n</div>\r\n\r\n<div id=\"legend_table\">\r\n</div>\r\n  `;\r\nconst getStyleText = function (legendStyle) {\r\n    const group = (legendStyle.hasOwnProperty(\"group\"))\r\n        ? \".\" + legendStyle.group\r\n        : \"\",\r\n        color = (legendStyle.hasOwnProperty(\"color\"))\r\n            ? legendStyle.color\r\n            : \"white\", /* whiteじゃないとマウスオーバーが不安定になる */\r\n        stroke = (legendStyle.hasOwnProperty(\"stroke\"))\r\n            ? legendStyle.stroke\r\n            : \"none\",\r\n        strokeWidth = legendStyle.hasOwnProperty(\"stroke-width\")\r\n            ? legendStyle[\"stroke-width\"]\r\n            : \"none\"\r\n\r\n    return `.plotArea circle${group}{fill:${color};stroke:${stroke};stroke-width:${strokeWidth};}` +\r\n        `.plotArea path${group}{fill:none;stroke:${color};stroke-width:${strokeWidth};}` +\r\n        `td${group}{color:${color};}`\r\n}\r\n\r\nconst toggleVisibility = (_) => {\r\n    // 凡例テーブルの状態を取得し,シンボルの表示状態を切り替え\r\n    const legendSimbol = d3.select(\"table.legend\").selectAll(\"td.switch\");\r\n    legendSimbol.each(function (d) {\r\n        var visiblityState = d3.select(this).attr(\"name\");\r\n        var className = d3.select(this).attr(\"class\");\r\n        var classArray = className.split(\" \");\r\n        if (visiblityState == \"hidden\") {\r\n            d3.selectAll(\".plotArea circle.\" + classArray[1])\r\n                .attr(\"visibility\", \"hidden\");\r\n            d3.selectAll(\".plotArea path.\" + classArray[1])\r\n                .attr(\"visibility\", \"hidden\");\r\n        } else {\r\n            d3.selectAll(\".plotArea circle.\" + classArray[1])\r\n                .attr(\"visibility\", \"visible\");\r\n            d3.selectAll(\".plotArea path.\" + classArray[1])\r\n                .attr(\"visibility\", \"visible\");\r\n        }\r\n    });\r\n}\r\n\r\nconst changeLegendStyle = (legendObj) => {\r\n    document.querySelector(\"#legendStyle\").innerHTML = Object.values(legendObj.legends)\r\n        .map(getStyleText)\r\n        .reduce((a, b) => a + b, \"\");\r\n}\r\n\r\nconst setEventToLegend = (legendObj) => {\r\n    const legendSimbol = d3.select(\"table.legend\").selectAll(\"td.switch\")\r\n    legendSimbol.on(\"click\", function (d) {\r\n        if (d3.select(this).attr(\"name\") !== \"hidden\") {\r\n            d3.select(this)\r\n                .attr(\"style\", \"color:#ffffff\")\r\n                .attr(\"name\", \"hidden\");\r\n        } else {\r\n            d3.select(this)\r\n                .attr(\"style\", \"\")\r\n                .attr(\"name\", \"visible\");\r\n        }\r\n        toggleVisibility();\r\n    });\r\n\r\n    /* カラーピッカーにonchangeイベントを設定*/\r\n    const legendColor = d3.select(\"table.legend\").selectAll(\"input\");\r\n    legendColor.on(\"change\", function () {\r\n        const selectedClass = d3.select(this).attr(\"class\"),\r\n            color = this.value;\r\n\r\n        const selected = Object.entries(legendObj.legends)\r\n            .filter(([k, v]) => v.group === selectedClass)[0];\r\n        selected[1].color = color;\r\n\r\n        changeLegendStyle({\r\n            key: legendObj.key,\r\n            legends: Object.assign(\r\n                legendObj.legends,\r\n                {\r\n                    [selected[0]]: selected[1]\r\n                })\r\n        })\r\n    });\r\n\r\n    //console.log(\"set mouse event to legend\")\r\n}\r\n\r\nconst createLegendTable = (legendObj) => {\r\n\r\n    d3.select(\"#legend_table\").select(\"table\").remove(\"table\");\r\n    var table = d3.select(\"#legend_table\").append(\"table\")\r\n        .attr(\"class\", \"legend\");\r\n    var thead = table.append(\"thead\");\r\n    var tbody = table.append(\"tbody\");\r\n\r\n    var theadRow = thead.append('tr')\r\n    theadRow.append(\"th\").append(\"input\")\r\n        .attr(\"type\", \"text\")\r\n        .attr(\"id\", \"legendKey\")\r\n        .attr(\"value\", legendObj.key);\r\n    theadRow.append(\"th\").text(\"symbol\");\r\n    theadRow.append(\"th\").text(\"color\");\r\n\r\n    var tbodyRow = tbody.selectAll(\"tr\").data(legendObj.legends);\r\n    tbodyRow.exit().remove();\r\n\r\n    const enteredTbodyRow = tbodyRow.enter().append(\"tr\")\r\n    const mergedTbodyRow = enteredTbodyRow.merge(tbodyRow)\r\n    mergedTbodyRow.append(\"th\").text(d => d.name);\r\n    mergedTbodyRow.append(\"td\")\r\n        .attr(\"class\", d => \"switch \" + d.group)\r\n        .text(d => (d.stroke) ? \"○\" : \"●\");\r\n    mergedTbodyRow.append(\"td\").append(\"input\")\r\n        .attr(\"class\", d => d.group)\r\n        .attr(\"type\", \"color\")\r\n        .attr(\"value\", d => d.color);\r\n\r\n    changeLegendStyle(legendObj);\r\n};\r\n\r\n\r\nconst setLegendFromUrl = uiState => (url) => {\r\n    /* レジェンド定義css読み込み */\r\n    fetch(url).then(function (data) {\r\n        return data.json();\r\n    }).then(function (obj) {\r\n        uiState.styleClass = obj.key;\r\n        createLegendTable(obj);\r\n        setEventToLegend(obj);\r\n        d3.select('#legendFileLabel').text(url);\r\n    })\r\n};\r\n\r\nconst allHide = _ => {\r\n    const circle = d3.selectAll(\".plotArea circle\")\r\n        .attr(\"visibility\", \"hidden\");\r\n    const path = d3.selectAll(\".plotArea path\")\r\n        .attr(\"visibility\", \"hidden\");\r\n    const td = d3.select(\"table.legend\")\r\n        .selectAll(\".switch\")\r\n        .attr(\"style\", \"color:#FFFFFF\")\r\n        .attr(\"name\", \"hidden\");\r\n}\r\n\r\nconst allShow = _ => {\r\n    const circle = d3.selectAll(\".plotArea circle\")\r\n        .attr(\"visibility\", \"visible\");\r\n    const path = d3.selectAll(\".plotArea path\")\r\n        .attr(\"visibility\", \"visible\");\r\n    const td = d3.select(\"table.legend\")\r\n        .selectAll(\".switch\")\r\n        .attr(\"style\", \"\")\r\n        .attr(\"name\", \"visible\");\r\n}\r\n\r\nconst exportToEmitter = [\r\n    { type: \"afterReplot\", action: toggleVisibility }\r\n];\r\n\r\nconst eventSetter = (emitter, uiState) => {\r\n\r\n    setLegendFromUrl(uiState)(\"../data/legend_NE_Shikoku.json\")\r\n\r\n    document.getElementById(\"legendJSON\").addEventListener('change', function (ev) {\r\n        const file = ev.target.files;\r\n        const reader = new FileReader();\r\n        reader.readAsText(file[0]);\r\n        //console.log(file)\r\n        reader.onload = ev => {\r\n            var obj = JSON.parse(reader.result);\r\n            uiState.styleClass = obj.key;\r\n            createLegendTable(obj);\r\n            setEventToLegend(obj);\r\n            emitter.replot();\r\n            emitter.afterReplot();\r\n        };\r\n        document.querySelector(\"#legendFileLabel\").innerHTML = (file[0].name);\r\n    }, false);\r\n\r\n    document.querySelector(\"#hideAll_button\")\r\n        .addEventListener('click', function (ev) { allHide() }, false);\r\n    document.querySelector(\"#showAll_button\")\r\n        .addEventListener('click', function (ev) { allShow() }, false);\r\n\r\n}\r\n\r\nconst option = {\r\n    label: \"Legend\",\r\n    draggable: false\r\n}\r\n\r\nconst style = `\r\n  left: 25%;\r\n  min-width: 25vw;\r\n  `;\r\n\n\n//# sourceURL=webpack:///./src/js/menu-legend.js?");

/***/ }),

/***/ "./src/js/menu-symbol.js":
/*!*******************************!*\
  !*** ./src/js/menu-symbol.js ***!
  \*******************************/
/*! exports provided: template, eventSetter, option, style */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"template\", function() { return template; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"eventSetter\", function() { return eventSetter; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"option\", function() { return option; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"style\", function() { return style; });\n\r\nconst template = uiState => `\r\n  <style>\r\n    #symbol-wrapper{\r\n      display : flex;\r\n      justify-content : center;\r\n      width: 35vw;\r\n  padding : 0 5px;\r\n  min-width:300px;\r\n  min-height: 100px;\r\n    }\r\n    #symbolForm{\r\n      display : flex;\r\n      flex-direction : column;\r\n      align-items : center;\r\n    }\r\n    #symbolForm .list-title{\r\n      color : #3e3e99;\r\n    }\r\n    #symbolForm ul{\r\n      border-bottom: 1px dashed #4e4ebb;\r\n      width : 100%;\r\n      padding : 0;\r\n    }\r\n    #symbolForm li{\r\n      display: flex;\r\n      align-items: center;\r\n      margin: 5px 0;\r\n    }\r\n    #symbolForm li span{\r\n      flex: 1;\r\n    }\r\n    #symbolForm li input{\r\n      flex : 2;\r\n    }\r\n  </style>\r\n\r\n  <div id=\"symbol-wrapper\">\r\n  <form class=\"symbolForm\" id=\"symbolForm\" style=\"width: 95%;min-height: 500px;\">\r\n    <a href=\"#\" class=\"close_button\" id=\"close_symbolForm\"></a>\r\n    <hr style=\"visibility:hidden\">\r\n    <span class=\"list-title\">Opacity</span>\r\n    <ul>\r\n    <li>\r\n      <span>Fade out</span>\r\n      <input type=\"range\" id=\"outOpacity\" min=\"0\" max=\"1\" value=\"0.3\" step=\"0.1\" >\r\n    </li>\r\n    <li>\r\n      <span>Base</span>\r\n      <input type=\"range\" id=\"baseOpacity\" min=\"0\" max=\"1\" value=\"0.8\" step=\"0.1\" >\r\n    </li>\r\n    <li>\r\n      <span>Focused</span>\r\n      <input type=\"range\" id=\"onOpacity\" min=\"0\" max=\"1\" value=\"1\" step=\"0.1\">\r\n    </li>\r\n    <li>\r\n      <span>Selected</span>\r\n      <input type=\"range\" id=\"selectedOpacity\" min=\"0\" max=\"1\" value=\"1\" step=\"0.1\">\r\n    </li>\r\n    </ul>\r\n    \r\n    <span class=\"list-title\">Symbol size</span>\r\n    <ul>\r\n    <li>\r\n      <span>Fade out</span>\r\n      <input type=\"range\" id=\"outRadius\" min=\"1\" max=\"12\" value=\"3\" step=\"0.5\">\r\n    </li>\r\n    <li>\r\n      <span>Base</span>\r\n      <input type=\"range\" id=\"baseRadius\" min=\"1\" max=\"12\" value=\"6\" step=\"0.5\">\r\n    </li>\r\n    <li>\r\n      <span>Focused</span>\r\n      <input type=\"range\" id=\"onRadius\" min=\"1\" max=\"12\" value=\"9\" step=\"0.5\">\r\n    </li>\r\n    <li>\r\n      <span>Selected</span>\r\n      <input type=\"range\" id=\"selectedRadius\" min=\"1\" max=\"12\" value=\"9\" step=\"0.5\">\r\n    </li>\r\n    </ul>\r\n\r\n    <span class=\"list-title\">Path width</span>\r\n    <ul>\r\n    <li>\r\n      <span>Fade out</span>\r\n      <input type=\"range\" id=\"outWidth\" min=\"0\" max=\"3\" value=\"0.25\" step=\"0.05\">\r\n    </li>\r\n    <li>\r\n      <span>Base</span>\r\n      <input type=\"range\" id=\"baseWidth\" min=\"0\" max=\"3\" value=\"1\" step=\"0.05\">\r\n    </li>\r\n    <li>\r\n      <span>Focused</span>\r\n      <input type=\"range\" id=\"onWidth\" min=\"0\" max=\"3\" value=\"3\" step=\"0.05\">\r\n    </li>\r\n    <li>\r\n      <span>Selected</span>\r\n      <input type=\"range\" id=\"selectedWidth\" min=\"0\" max=\"3\" value=\"3\" step=\"0.05\">\r\n    </li>\r\n    </ul>\r\n    </div>\r\n  `;\r\n\r\nconst eventSetter = (emitter, uiState) => {\r\n  [...document.querySelectorAll(\"#symbolForm input\")].forEach(dom => {\r\n    const id = dom.id;\r\n    dom.value = uiState.symbol[id]\r\n    dom.addEventListener(\r\n      \"change\",\r\n      ev => {\r\n        uiState.symbol[id] = parseFloat(dom.value);\r\n        emitter.replot()\r\n        emitter.afterReplot();\r\n      },\r\n      false\r\n    )\r\n  })\r\n}\r\n\r\nconst option = {\r\n  label: \"Symbol\",\r\n  draggable: false\r\n}\r\n\r\nconst style = `\r\n  left: 15%;\r\n  \r\n  \r\n  `\n\n//# sourceURL=webpack:///./src/js/menu-symbol.js?");

/***/ }),

/***/ "./src/js/menu-test.js":
/*!*****************************!*\
  !*** ./src/js/menu-test.js ***!
  \*****************************/
/*! exports provided: template, eventSetter, option, style */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"template\", function() { return template; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"eventSetter\", function() { return eventSetter; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"option\", function() { return option; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"style\", function() { return style; });\n\r\nconst template = _ => `\r\n  <label for=\"inp\" class=\"inp\">\r\n    <input type=\"text\" id=\"inp\" placeholder=\"&nbsp;\">\r\n    <span class=\"label\">お名前</span>\r\n    <span class=\"border\"></span>\r\n  </label>\r\n  `;\r\n\r\nconst eventSetter = (_, __) => {\r\n\r\n};\r\n\r\nconst option = {\r\n  label: \"Test menu\",\r\n  draggable: true\r\n}\r\n\r\nconst style = `\r\n    width : 400px;\r\n  `\r\n\n\n//# sourceURL=webpack:///./src/js/menu-test.js?");

/***/ }),

/***/ "./src/js/top-menu.js":
/*!****************************!*\
  !*** ./src/js/top-menu.js ***!
  \****************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return TopMenu; });\n//import $ from \"../../../jslib/jquery-2.2.0.min.js\"\r\n/**\r\n * top menu extensionの作り方\r\n * \r\n * 次の4つを必ずexportする\r\n * \r\n * 1. {function} {String} template(uiState)\r\n *  メニューウィンドウの内容を表すHTMLを返す.\r\n *  これはメニュー登録時にdiv要素にラップされる.\r\n * 2. {function} {void} eventSetter(emitter, uiState)\r\n *  上記のHTML要素にイベントハンドラを与えるメソッド.\r\n *  emitterに登録されたactionを用いることができる.\r\n * 3. {Object} option = {\r\n *  {String} label : \"Label of Button shown in top menu\"\r\n *  {Bool} draggable : Either draggable or not\r\n * }\r\n *  トップメニューに表示されるメニュー表示ボタンの名前と, \r\n *  ドラッグイベントによる移動の可否を定義する.\r\n * 4. {String} style = \"css string defining geometry of menu contents\"\r\n *  表示されるメニューウィンドウのサイズやpaddingを定義する.\r\n *  (templateが返すHTML要素をラップしたdiv要素に与えられるスタイル)\r\n * \r\n * Event Emitterに追加する関数がある場合次を定義する\r\n * 5. {Array} exportToEmitter = [\r\n *  {\r\n *    {String} type : \"action type of Emitter\",\r\n *    {function} action : {void} method\r\n *  }\r\n * ]\r\n */\r\n\r\nclass TopMenu {\r\n  constructor(menuBarId, overlayId, eventEmitter, uiState) {\r\n    this.overlayId = overlayId;\r\n    this.menuBarId = menuBarId;\r\n    this.menuCount = 0;\r\n    this.emitter = eventEmitter;\r\n    this.uiState = uiState;\r\n    this.initialize();\r\n  }\r\n\r\n  initialize() {\r\n    this.setMenuSpace();\r\n  }\r\n\r\n  setMenuSpace() {\r\n    const menuSpace = document.createElement(\"div\");\r\n    menuSpace.id = \"menu-bar-contents\";\r\n    document.querySelector(\"body\").appendChild(menuSpace);\r\n    this.menuBar = document.querySelector(`#${this.menuBarId}`)\r\n    this.menuSpace = document.querySelector(`#menu-bar-contents`);\r\n  }\r\n\r\n  register(...menus) {\r\n    menus.forEach(({ template, option, eventSetter, style, exportToEmitter }) => {\r\n      const contentId = \"menu-bar-content-\"\r\n        + this.menuCount++;\r\n      const btnId = \"btn-\" + contentId;\r\n\r\n      const openButton = document.createElement(\"a\");\r\n      openButton.classList.add(\"menu-btn\")\r\n      openButton.id = btnId;\r\n      openButton.href = \"#\";\r\n      openButton.innerText = option.label;\r\n      this.menuBar.appendChild(openButton);\r\n      const left = openButton.offsetLeft;\r\n\r\n\r\n      const dom = document.createElement(\"div\")\r\n\r\n      dom.id = contentId;\r\n      dom.classList.add(\"menu-bar-content\");\r\n      dom.setAttribute(\"style\", style);\r\n      this.menuSpace.appendChild(dom);\r\n      dom.style.left = left;\r\n      $(\"#\" + contentId).html(template(this.uiState)).trigger(\"create\");\r\n\r\n\r\n      eventSetter(this.emitter, this.uiState);\r\n\r\n      if (Array.isArray(exportToEmitter)) {\r\n        this.emitter.registerAction(exportToEmitter)\r\n      }\r\n\r\n      TopMenu.setOpenClose(\r\n        \"#\" + btnId,\r\n        \"#\" + contentId,\r\n        \"#\" + this.overlayId\r\n      );\r\n      TopMenu.setDrag(\"#\" + contentId, option);\r\n    })\r\n  }\r\n\r\n  static setOpenClose(btn, content, overlay) {\r\n    $(btn).click(function () {\r\n      $(content).fadeIn();\r\n      $(content + \" input\")[0].focus();\r\n      $(overlay).fadeIn();\r\n      return false;\r\n    });\r\n    $(overlay).click(function () {\r\n      $(overlay).fadeOut();\r\n      $(content).fadeOut();\r\n    });\r\n    $(`${content} .close_button`).click(function () {\r\n      $(overlay).fadeOut();\r\n      $(content).fadeOut();\r\n    });\r\n  }\r\n\r\n  static setDrag(content, { draggable }) {\r\n    if (draggable) {\r\n      $(content).draggable({\r\n        cursor: \"move\"\r\n      })\r\n    }\r\n  }\r\n\r\n}\r\n\n\n//# sourceURL=webpack:///./src/js/top-menu.js?");

/***/ }),

/***/ "./src/js/ui-updater.js":
/*!******************************!*\
  !*** ./src/js/ui-updater.js ***!
  \******************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return UIUpdater; });\nclass UIUpdater {\r\n  constructor(option) {\r\n    this.action = {\r\n      replot: [],\r\n      afterReplot: []\r\n    }\r\n  }\r\n\r\n  registerAction(array) {\r\n    ((Array.isArray(array))\r\n      ? array\r\n      : [array])\r\n      .forEach(({ type, action }) => {\r\n        if (!this.action.hasOwnProperty(type)) throw new Error()\r\n        if (this.action[type].indexOf(action) >= 0) throw new Error();\r\n        this.action[type].push(action);\r\n      })\r\n  }\r\n\r\n  replot() {\r\n    this.action.replot.forEach(action => {\r\n      action();\r\n    })\r\n  }\r\n\r\n  afterReplot() {\r\n    this.action.afterReplot.forEach(action => {\r\n      action();\r\n    })\r\n  }\r\n}\n\n//# sourceURL=webpack:///./src/js/ui-updater.js?");

/***/ }),

/***/ 0:
/*!*****************************!*\
  !*** multi ./src/js/app.js ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports = __webpack_require__(/*! ./src/js/app.js */\"./src/js/app.js\");\n\n\n//# sourceURL=webpack:///multi_./src/js/app.js?");

/***/ })

/******/ });